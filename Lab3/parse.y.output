[[parse.y (info)] Line 657: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: translation_unit ->  struct_specifier
2: translation_unit ->  function_definition
3: translation_unit ->  translation_unit function_definition
4: translation_unit ->  translation_unit struct_specifier
5: struct_specifier (STRUCT) ->  STRUCT IDENTIFIER '{' declaration_list '}' ';'
6: function_definition ->  type_specifier fun_declarator #0001 compound_statement
7: #0001 ->  <empty>
8: type_specifier (VOID) ->  VOID
9: type_specifier (INT) ->  INT
10: type_specifier (FLOAT) ->  FLOAT
11: type_specifier (STRUCT) ->  STRUCT IDENTIFIER
12: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' #0002 parameter_list ')'
13: #0002 ->  <empty>
14: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
15: fun_declarator ('*') ->  '*' fun_declarator
16: parameter_list ->  parameter_declaration
17: parameter_list (',') ->  parameter_list ',' parameter_declaration
18: parameter_declaration ->  type_specifier declarator
19: declarator (IDENTIFIER) ->  IDENTIFIER
20: declarator ('[') ->  declarator '[' primary_expression ']'
21: declarator ('*') ->  '*' declarator
22: primary_expression (IDENTIFIER) ->  IDENTIFIER
23: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
24: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
25: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
26: primary_expression ('(') ->  '(' expression ')'
27: compound_statement ('{') ->  '{' '}'
28: compound_statement ('{') ->  '{' statement_list '}'
29: compound_statement ('{') ->  '{' declaration_list #0003 statement_list '}'
30: #0003 ->  <empty>
31: statement_list ->  statement
32: statement_list ->  statement_list statement
33: statement ('{') ->  '{' statement_list '}'
34: statement ->  selection_statement
35: statement ->  iteration_statement
36: statement ->  assignment_statement
37: statement (RETURN) ->  RETURN expression ';'
38: assignment_statement (';') ->  ';'
39: assignment_statement (';') ->  expression ';'
40: expression ->  logical_or_expression
41: expression ('=') ->  unary_expression '=' expression
42: logical_or_expression ->  logical_and_expression
43: logical_or_expression (OR_OP) ->  logical_or_expression OR_OP logical_and_expression
44: logical_and_expression ->  equality_expression
45: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
46: equality_expression ->  relational_expression
47: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
48: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
49: relational_expression ->  additive_expression
50: relational_expression ('<') ->  relational_expression '<' additive_expression
51: relational_expression ('>') ->  relational_expression '>' additive_expression
52: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
53: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
54: additive_expression ->  multiplicative_expression
55: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
56: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
57: multiplicative_expression ->  unary_expression
58: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
59: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
60: unary_expression ->  postfix_expression
61: unary_expression ->  unary_operator postfix_expression
62: postfix_expression ->  primary_expression
63: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
64: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' #0004 expression_list ')'
65: #0004 ->  <empty>
66: postfix_expression ('[') ->  postfix_expression '[' expression ']'
67: postfix_expression ('.') ->  postfix_expression '.' IDENTIFIER
68: postfix_expression (PTR_OP) ->  postfix_expression PTR_OP IDENTIFIER
69: postfix_expression (INC_OP) ->  postfix_expression INC_OP
70: expression_list ->  expression
71: expression_list (',') ->  expression_list ',' expression
72: unary_operator ('-') ->  '-'
73: unary_operator ('!') ->  '!'
74: unary_operator ('&') ->  '&'
75: unary_operator ('*') ->  '*'
76: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
77: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
78: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
79: declaration_list ->  declaration
80: declaration_list ->  declaration_list declaration
81: declaration (';') ->  type_specifier declarator_list ';'
82: declarator_list ->  declarator
83: declarator_list (',') ->  declarator_list ',' declarator
84: translation_unit_$ ->  translation_unit

[[parse.y (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: VOID
   258: INT
   259: FLOAT
   260: RETURN
   261: LE_OP
   262: GE_OP
   263: EQ_OP
   264: NE_OP
   265: OR_OP
   266: AND_OP
   267: INC_OP
   268: IF
   269: ELSE
   270: WHILE
   271: FOR
   272: INT_CONSTANT
   273: FLOAT_CONSTANT
   274: STRING_LITERAL
   275: IDENTIFIER
   276: STRUCT
   277: PTR_OP
   123: '{'
   125: '}'
    59: ';'
    40: '('
    41: ')'
    42: '*'
    44: ','
    91: '['
    93: ']'
    61: '='
    60: '<'
    62: '>'
    43: '+'
    45: '-'
    47: '/'
    46: '.'
    33: '!'
    38: '&'

[[parse.y (info)] 
FIRST sets:
   translation_unit: { VOID INT FLOAT STRUCT }
   struct_specifier: { STRUCT }
   function_definition: { VOID INT FLOAT STRUCT }
   #0001:    { <e> }
   type_specifier: { VOID INT FLOAT STRUCT }
   fun_declarator: { IDENTIFIER '*' }
   #0002:    { <e> }
   parameter_list: { VOID INT FLOAT STRUCT }
   parameter_declaration: { VOID INT FLOAT STRUCT }
   declarator: { IDENTIFIER '*' }
   primary_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }
   compound_statement: { '{' }
   #0003:    { <e> }
   statement_list: { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' ';' '(' '*' '-' '!' '&' }
   statement: { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' ';' '(' '*' '-' '!' '&' }
   assignment_statement: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER ';' '(' '*' '-' '!' '&' }
   expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   logical_or_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   logical_and_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   equality_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   relational_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   additive_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   multiplicative_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   unary_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   postfix_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }
   #0004:    { <e> }
   expression_list: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   unary_operator: { '*' '-' '!' '&' }
   selection_statement: { IF }
   iteration_statement: { FOR WHILE }
   declaration_list: { VOID INT FLOAT STRUCT }
   declaration: { VOID INT FLOAT STRUCT }
   declarator_list: { IDENTIFIER '*' }
   translation_unit_$: { VOID INT FLOAT STRUCT }

[[parse.y (info)] 
FOLLOW sets:
   translation_unit: { VOID INT FLOAT STRUCT <EOF> }
   struct_specifier: { VOID INT FLOAT STRUCT <EOF> }
   function_definition: { VOID INT FLOAT STRUCT <EOF> }
   #0001:    { '{' }
   type_specifier: { IDENTIFIER '*' }
   fun_declarator: { '{' }
   #0002:    { VOID INT FLOAT STRUCT }
   parameter_list: { ',' ')' }
   parameter_declaration: { ',' ')' }
   declarator: { ';' ',' ')' '[' }
   primary_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }
   compound_statement: { VOID INT FLOAT STRUCT <EOF> }
   #0003:    { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' ';' '(' '*' '-' '!' '&' }
   statement_list: { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }
   statement: { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }
   assignment_statement: { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }
   expression: { ';' ',' ')' ']' }
   logical_or_expression: { OR_OP ';' ',' ')' ']' }
   logical_and_expression: { OR_OP AND_OP ';' ',' ')' ']' }
   equality_expression: { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }
   relational_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }
   additive_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }
   multiplicative_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }
   unary_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }
   postfix_expression: { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }
   #0004:    { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }
   expression_list: { ',' ')' }
   unary_operator: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }
   selection_statement: { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }
   iteration_statement: { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }
   declaration_list: { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }
   declaration: { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }
   declarator_list: { ';' ',' }
   translation_unit_$: { <EOF> }

[[parse.y (info)] 
Grammar States: 
[[parse.y (info)] 
For each state information like the following is shown for its items:
   0: [P1 1] S -> C  . C   { <EOF> }  0, (1 2 ) 0
which should be read as follows:
   0:          The item's index
   [P1 1]:     The rule (production) number and current dot-position
   S -> C . C: The item (lhs -> Recognized-symbols . symbols-to-recognize)
   { <EOF> }   The item's lookahead (LA) set
   0,          The next state's LA set is not enlarged (1: it is enlarged)
   (1 2)       Item indices of items whose LA sets depend on this item
   0           The next-element (shown below the items) describing the
               action associated with this item (-1 for reducible items)

The Next tables show entries like:
   0: On C to state 5 with (0 )
meaning:
   0:               The Next table's index
   On C to state 5: When C was recognized, continue at state 5
   with (0 )        The item(s) whose dot is shifted at the next state
Indices (like 0:) may be annotated as follows:
   0 (AUTO REMOVED by S/R resolution): On C ...
       in which case a reduction using a production with unspecified
       precedence took priority;
or:
   0 (removed by precedence): On C ...
       in which case a production rule's precedence took priority
Also, reduction item(s) may be listed


State 0:
0: [P84 0] translation_unit_$ ->  . translation_unit   { <EOF> }  0, (1 2 3 4 ) 0
1: [P1 0] translation_unit ->  . struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  0, (5 ) 1
2: [P2 0] translation_unit ->  . function_definition   { VOID INT FLOAT STRUCT <EOF> }  0, (6 ) 2
3: [P3 0] translation_unit ->  . translation_unit function_definition   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 3 4 ) 0
4: [P4 0] translation_unit ->  . translation_unit struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 3 4 ) 0
5: [P5 0] struct_specifier ->  . STRUCT IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 3
6: [P6 0] function_definition ->  . type_specifier fun_declarator #0001 compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0, (7 8 9 10 ) 4
7: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 5
8: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 6
9: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 7
10: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 3
  0:   On translation_unit to state 1 with (0 3 4 )
  1:   On struct_specifier to state 2 with (1 )
  2:   On function_definition to state 3 with (2 )
  3:   On STRUCT to state 4 with (5 10 )
  4:   On type_specifier to state 5 with (6 )
  5:   On VOID to state 6 with (7 )
  6:   On INT to state 7 with (8 )
  7:   On FLOAT to state 8 with (9 )


State 1:
0: [P84 1] translation_unit_$ -> translation_unit  .   { <EOF> }  1, () -1
1: [P3 1] translation_unit -> translation_unit  . function_definition   { VOID INT FLOAT STRUCT <EOF> }  0, (3 ) 0
2: [P4 1] translation_unit -> translation_unit  . struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  0, (4 ) 1
3: [P6 0] function_definition ->  . type_specifier fun_declarator #0001 compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0, (5 6 7 8 ) 2
4: [P5 0] struct_specifier ->  . STRUCT IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 3
5: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 4
6: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 5
7: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 6
8: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 3
  0:   On function_definition to state 9 with (1 )
  1:   On struct_specifier to state 10 with (2 )
  2:   On type_specifier to state 5 with (3 )
  3:   On STRUCT to state 4 with (4 8 )
  4:   On VOID to state 6 with (5 )
  5:   On INT to state 7 with (6 )
  6:   On FLOAT to state 8 with (7 )


State 2:
0: [P1 1] translation_unit -> struct_specifier  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 3:
0: [P2 1] translation_unit -> function_definition  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 4:
0: [P5 1] struct_specifier -> STRUCT  . IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P11 1] type_specifier -> STRUCT  . IDENTIFIER   { IDENTIFIER '*' }  0, () 0
  0:   On IDENTIFIER to state 11 with (0 1 )


State 5:
0: [P6 1] function_definition -> type_specifier  . fun_declarator #0001 compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 3 ) 0
1: [P12 0] fun_declarator ->  . IDENTIFIER '(' #0002 parameter_list ')'   { '{' }  0, () 1
2: [P14 0] fun_declarator ->  . IDENTIFIER '(' ')'   { '{' }  0, () 1
3: [P15 0] fun_declarator ->  . '*' fun_declarator   { '{' }  0, () 2
  0:   On fun_declarator to state 12 with (0 )
  1:   On IDENTIFIER to state 13 with (1 2 )
  2:   On '*' to state 14 with (3 )


State 6:
0: [P8 1] type_specifier -> VOID  .   { IDENTIFIER '*' }  1, () -1
  Reduce item(s): 0 


State 7:
0: [P9 1] type_specifier -> INT  .   { IDENTIFIER '*' }  1, () -1
  Reduce item(s): 0 


State 8:
0: [P10 1] type_specifier -> FLOAT  .   { IDENTIFIER '*' }  1, () -1
  Reduce item(s): 0 


State 9:
0: [P3 2] translation_unit -> translation_unit function_definition  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 10:
0: [P4 2] translation_unit -> translation_unit struct_specifier  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 11:
0: [P5 2] struct_specifier -> STRUCT IDENTIFIER  . '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P11 2] type_specifier -> STRUCT IDENTIFIER  .   { IDENTIFIER '*' }  1, () -1
  0:   On '{' to state 15 with (0 )
  Reduce item(s): 1 


State 12:
0: [P6 2] function_definition -> type_specifier fun_declarator  . #0001 compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0, (1 ) 0
1: [P7 0] #0001 ->  .   { '{' }  1, () -1
  0:   On #0001 to state 16 with (0 )
  Reduce item(s): 1 


State 13:
0: [P12 1] fun_declarator -> IDENTIFIER  . '(' #0002 parameter_list ')'   { '{' }  0, () 0
1: [P14 1] fun_declarator -> IDENTIFIER  . '(' ')'   { '{' }  0, () 0
  0:   On '(' to state 17 with (0 1 )


State 14:
0: [P15 1] fun_declarator -> '*'  . fun_declarator   { '{' }  0, (1 2 3 ) 0
1: [P12 0] fun_declarator ->  . IDENTIFIER '(' #0002 parameter_list ')'   { '{' }  0, () 1
2: [P14 0] fun_declarator ->  . IDENTIFIER '(' ')'   { '{' }  0, () 1
3: [P15 0] fun_declarator ->  . '*' fun_declarator   { '{' }  0, () 2
  0:   On fun_declarator to state 18 with (0 )
  1:   On IDENTIFIER to state 13 with (1 2 )
  2:   On '*' to state 14 with (3 )


State 15:
0: [P5 3] struct_specifier -> STRUCT IDENTIFIER '{'  . declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 ) 0
1: [P79 0] declaration_list ->  . declaration   { VOID INT FLOAT STRUCT '}' }  0, (3 ) 1
2: [P80 0] declaration_list ->  . declaration_list declaration   { VOID INT FLOAT STRUCT '}' }  0, (1 2 ) 0
3: [P81 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT STRUCT '}' }  0, (4 5 6 7 ) 2
4: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 3
5: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 4
6: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 5
7: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 6
  0:   On declaration_list to state 19 with (0 2 )
  1:   On declaration to state 20 with (1 )
  2:   On type_specifier to state 21 with (3 )
  3:   On VOID to state 6 with (4 )
  4:   On INT to state 7 with (5 )
  5:   On FLOAT to state 8 with (6 )
  6:   On STRUCT to state 22 with (7 )


State 16:
0: [P6 3] function_definition -> type_specifier fun_declarator #0001  . compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 3 ) 0
1: [P27 0] compound_statement ->  . '{' '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 1
2: [P28 0] compound_statement ->  . '{' statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 1
3: [P29 0] compound_statement ->  . '{' declaration_list #0003 statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 1
  0:   On compound_statement to state 23 with (0 )
  1:   On '{' to state 24 with (1 2 3 )


State 17:
0: [P12 2] fun_declarator -> IDENTIFIER '('  . #0002 parameter_list ')'   { '{' }  0, (2 ) 0
1: [P14 2] fun_declarator -> IDENTIFIER '('  . ')'   { '{' }  0, () 1
2: [P13 0] #0002 ->  .   { VOID INT FLOAT STRUCT }  1, () -1
  0:   On #0002 to state 25 with (0 )
  1:   On ')' to state 26 with (1 )
  Reduce item(s): 2 


State 18:
0: [P15 2] fun_declarator -> '*' fun_declarator  .   { '{' }  1, () -1
  Reduce item(s): 0 


State 19:
0: [P5 4] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list  . '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P80 1] declaration_list -> declaration_list  . declaration   { VOID INT FLOAT STRUCT '}' }  0, (2 ) 1
2: [P81 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT STRUCT '}' }  0, (3 4 5 6 ) 2
3: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 3
4: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 4
5: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 5
6: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 6
  0:   On '}' to state 27 with (0 )
  1:   On declaration to state 28 with (1 )
  2:   On type_specifier to state 21 with (2 )
  3:   On VOID to state 6 with (3 )
  4:   On INT to state 7 with (4 )
  5:   On FLOAT to state 8 with (5 )
  6:   On STRUCT to state 22 with (6 )


State 20:
0: [P79 1] declaration_list -> declaration  .   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 21:
0: [P81 1] declaration -> type_specifier  . declarator_list ';'   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P82 0] declarator_list ->  . declarator   { ';' ',' }  0, (3 4 5 ) 1
2: [P83 0] declarator_list ->  . declarator_list ',' declarator   { ';' ',' }  0, (1 2 ) 0
3: [P19 0] declarator ->  . IDENTIFIER   { ';' ',' '[' }  0, () 2
4: [P20 0] declarator ->  . declarator '[' primary_expression ']'   { ';' ',' '[' }  0, (3 4 5 ) 1
5: [P21 0] declarator ->  . '*' declarator   { ';' ',' '[' }  0, () 3
  0:   On declarator_list to state 29 with (0 2 )
  1:   On declarator to state 30 with (1 4 )
  2:   On IDENTIFIER to state 31 with (3 )
  3:   On '*' to state 32 with (5 )


State 22:
0: [P11 1] type_specifier -> STRUCT  . IDENTIFIER   { IDENTIFIER '*' }  0, () 0
  0:   On IDENTIFIER to state 33 with (0 )


State 23:
0: [P6 4] function_definition -> type_specifier fun_declarator #0001 compound_statement  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 24:
0: [P27 1] compound_statement -> '{'  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P28 1] compound_statement -> '{'  . statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, (3 4 ) 1
2: [P29 1] compound_statement -> '{'  . declaration_list #0003 statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, (5 6 ) 2
3: [P31 0] statement_list ->  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 8 9 10 11 ) 3
4: [P32 0] statement_list ->  . statement_list statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (3 4 ) 1
5: [P79 0] declaration_list ->  . declaration   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' ';' '(' '*' '-' '!' '&' }  0, (12 ) 4
6: [P80 0] declaration_list ->  . declaration_list declaration   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' ';' '(' '*' '-' '!' '&' }  0, (5 6 ) 2
7: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 5
8: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (13 ) 6
9: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (14 15 ) 7
10: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (16 17 ) 8
11: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
12: [P81 0] declaration ->  . type_specifier declarator_list ';'   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' ';' '(' '*' '-' '!' '&' }  0, (18 19 20 21 ) 10
13: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 11
14: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 12
15: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 13
16: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 14
17: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (22 23 ) 15
18: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 16
19: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 17
20: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 18
21: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 19
22: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (24 25 ) 20
23: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (26 27 ) 21
24: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (28 29 ) 22
25: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (24 25 ) 20
26: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (30 31 32 33 34 35 36 ) 23
27: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (37 38 39 40 ) 24
28: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (41 42 43 ) 25
29: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (28 29 ) 22
30: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (44 45 46 47 48 ) 26
31: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
32: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
33: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (30 31 32 33 34 35 36 ) 23
34: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (30 31 32 33 34 35 36 ) 23
35: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (30 31 32 33 34 35 36 ) 23
36: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (30 31 32 33 34 35 36 ) 23
37: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 28
38: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 29
39: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 30
40: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 31
41: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (49 50 51 52 53 ) 32
42: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (41 42 43 ) 25
43: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (41 42 43 ) 25
44: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
45: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 33
46: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 34
47: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 35
48: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 36
49: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (54 55 56 ) 37
50: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (49 50 51 52 53 ) 32
51: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (49 50 51 52 53 ) 32
52: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (49 50 51 52 53 ) 32
53: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (49 50 51 52 53 ) 32
54: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (57 58 59 ) 38
55: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (54 55 56 ) 37
56: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (54 55 56 ) 37
57: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (26 27 ) 21
58: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (57 58 59 ) 38
59: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (57 58 59 ) 38
  0:   On '}' to state 34 with (0 )
  1:   On statement_list to state 35 with (1 4 )
  2:   On declaration_list to state 36 with (2 6 )
  3:   On statement to state 37 with (3 )
  4:   On declaration to state 20 with (5 )
  5:   On '{' to state 38 with (7 )
  6:   On selection_statement to state 39 with (8 )
  7:   On iteration_statement to state 40 with (9 )
  8:   On assignment_statement to state 41 with (10 )
  9:   On RETURN to state 42 with (11 )
  10:   On type_specifier to state 21 with (12 )
  11:   On IF to state 43 with (13 )
  12:   On WHILE to state 44 with (14 )
  13:   On FOR to state 45 with (15 )
  14:   On ';' to state 46 with (16 )
  15:   On expression to state 47 with (17 )
  16:   On VOID to state 6 with (18 )
  17:   On INT to state 7 with (19 )
  18:   On FLOAT to state 8 with (20 )
  19:   On STRUCT to state 22 with (21 )
  20:   On logical_or_expression to state 48 with (22 25 )
  21:   On unary_expression to state 49 with (23 57 )
  22:   On logical_and_expression to state 50 with (24 29 )
  23:   On postfix_expression to state 51 with (26 33 34 35 36 )
  24:   On unary_operator to state 52 with (27 )
  25:   On equality_expression to state 53 with (28 42 43 )
  26:   On primary_expression to state 54 with (30 )
  27:   On IDENTIFIER to state 55 with (31 32 44 )
  28:   On '-' to state 56 with (37 )
  29:   On '!' to state 57 with (38 )
  30:   On '&' to state 58 with (39 )
  31:   On '*' to state 59 with (40 )
  32:   On relational_expression to state 60 with (41 50 51 52 53 )
  33:   On INT_CONSTANT to state 61 with (45 )
  34:   On FLOAT_CONSTANT to state 62 with (46 )
  35:   On STRING_LITERAL to state 63 with (47 )
  36:   On '(' to state 64 with (48 )
  37:   On additive_expression to state 65 with (49 55 56 )
  38:   On multiplicative_expression to state 66 with (54 58 59 )


State 25:
0: [P12 3] fun_declarator -> IDENTIFIER '(' #0002  . parameter_list ')'   { '{' }  0, (1 2 ) 0
1: [P16 0] parameter_list ->  . parameter_declaration   { ',' ')' }  0, (3 ) 1
2: [P17 0] parameter_list ->  . parameter_list ',' parameter_declaration   { ',' ')' }  0, (1 2 ) 0
3: [P18 0] parameter_declaration ->  . type_specifier declarator   { ',' ')' }  0, (4 5 6 7 ) 2
4: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 3
5: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 4
6: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 5
7: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 6
  0:   On parameter_list to state 67 with (0 2 )
  1:   On parameter_declaration to state 68 with (1 )
  2:   On type_specifier to state 69 with (3 )
  3:   On VOID to state 6 with (4 )
  4:   On INT to state 7 with (5 )
  5:   On FLOAT to state 8 with (6 )
  6:   On STRUCT to state 22 with (7 )


State 26:
0: [P14 3] fun_declarator -> IDENTIFIER '(' ')'  .   { '{' }  1, () -1
  Reduce item(s): 0 


State 27:
0: [P5 5] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list '}'  . ';'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
  0:   On ';' to state 70 with (0 )


State 28:
0: [P80 2] declaration_list -> declaration_list declaration  .   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 29:
0: [P81 2] declaration -> type_specifier declarator_list  . ';'   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
1: [P83 1] declarator_list -> declarator_list  . ',' declarator   { ';' ',' }  0, () 1
  0:   On ';' to state 71 with (0 )
  1:   On ',' to state 72 with (1 )


State 30:
0: [P82 1] declarator_list -> declarator  .   { ';' ',' }  1, () -1
1: [P20 1] declarator -> declarator  . '[' primary_expression ']'   { ';' ',' '[' }  0, () 0
  0:   On '[' to state 73 with (1 )
  Reduce item(s): 0 


State 31:
0: [P19 1] declarator -> IDENTIFIER  .   { ';' ',' ')' '[' }  1, () -1
  Reduce item(s): 0 


State 32:
0: [P21 1] declarator -> '*'  . declarator   { ';' ',' ')' '[' }  0, (1 2 3 ) 0
1: [P19 0] declarator ->  . IDENTIFIER   { ';' ',' ')' '[' }  0, () 1
2: [P20 0] declarator ->  . declarator '[' primary_expression ']'   { ';' ',' ')' '[' }  0, (1 2 3 ) 0
3: [P21 0] declarator ->  . '*' declarator   { ';' ',' ')' '[' }  0, () 2
  0:   On declarator to state 74 with (0 2 )
  1:   On IDENTIFIER to state 31 with (1 )
  2:   On '*' to state 32 with (3 )


State 33:
0: [P11 2] type_specifier -> STRUCT IDENTIFIER  .   { IDENTIFIER '*' }  1, () -1
  Reduce item(s): 0 


State 34:
0: [P27 2] compound_statement -> '{' '}'  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 35:
0: [P28 2] compound_statement -> '{' statement_list  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P32 1] statement_list -> statement_list  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (2 3 4 5 6 ) 1
2: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 2
3: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 ) 3
4: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (8 9 ) 4
5: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (10 11 ) 5
6: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 10
11: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (12 13 ) 11
12: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (14 15 ) 12
13: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (16 17 ) 13
14: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (18 19 ) 14
15: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (14 15 ) 12
16: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (20 21 22 23 24 25 26 ) 15
17: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (27 28 29 30 ) 16
18: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (31 32 33 ) 17
19: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (18 19 ) 14
20: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (34 35 36 37 38 ) 18
21: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
22: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
23: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
24: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
25: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
26: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
27: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 23
31: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (39 40 41 42 43 ) 24
32: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
33: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
34: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
35: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 28
39: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (44 45 46 ) 29
40: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
41: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
42: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
43: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
44: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (47 48 49 ) 30
45: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
46: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
47: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 ) 13
48: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
49: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
  0:   On '}' to state 75 with (0 )
  1:   On statement to state 76 with (1 )
  2:   On '{' to state 38 with (2 )
  3:   On selection_statement to state 39 with (3 )
  4:   On iteration_statement to state 40 with (4 )
  5:   On assignment_statement to state 41 with (5 )
  6:   On RETURN to state 42 with (6 )
  7:   On IF to state 43 with (7 )
  8:   On WHILE to state 44 with (8 )
  9:   On FOR to state 45 with (9 )
  10:   On ';' to state 46 with (10 )
  11:   On expression to state 47 with (11 )
  12:   On logical_or_expression to state 48 with (12 15 )
  13:   On unary_expression to state 49 with (13 47 )
  14:   On logical_and_expression to state 50 with (14 19 )
  15:   On postfix_expression to state 51 with (16 23 24 25 26 )
  16:   On unary_operator to state 52 with (17 )
  17:   On equality_expression to state 53 with (18 32 33 )
  18:   On primary_expression to state 54 with (20 )
  19:   On IDENTIFIER to state 55 with (21 22 34 )
  20:   On '-' to state 56 with (27 )
  21:   On '!' to state 57 with (28 )
  22:   On '&' to state 58 with (29 )
  23:   On '*' to state 59 with (30 )
  24:   On relational_expression to state 60 with (31 40 41 42 43 )
  25:   On INT_CONSTANT to state 61 with (35 )
  26:   On FLOAT_CONSTANT to state 62 with (36 )
  27:   On STRING_LITERAL to state 63 with (37 )
  28:   On '(' to state 64 with (38 )
  29:   On additive_expression to state 65 with (39 45 46 )
  30:   On multiplicative_expression to state 66 with (44 48 49 )


State 36:
0: [P29 2] compound_statement -> '{' declaration_list  . #0003 statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, (2 ) 0
1: [P80 1] declaration_list -> declaration_list  . declaration   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' ';' '(' '*' '-' '!' '&' }  0, (3 ) 1
2: [P30 0] #0003 ->  .   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' ';' '(' '*' '-' '!' '&' }  1, () -1
3: [P81 0] declaration ->  . type_specifier declarator_list ';'   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' ';' '(' '*' '-' '!' '&' }  0, (4 5 6 7 ) 2
4: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 3
5: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 4
6: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 5
7: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 6
  0:   On #0003 to state 77 with (0 )
  1:   On declaration to state 28 with (1 )
  2:   On type_specifier to state 21 with (3 )
  3:   On VOID to state 6 with (4 )
  4:   On INT to state 7 with (5 )
  5:   On FLOAT to state 8 with (6 )
  6:   On STRUCT to state 22 with (7 )
  Reduce item(s): 2 


State 37:
0: [P31 1] statement_list -> statement  .   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 38:
0: [P33 1] statement -> '{'  . statement_list '}'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P31 0] statement_list ->  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (3 4 5 6 7 ) 1
2: [P32 0] statement_list ->  . statement_list statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
3: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 2
4: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (8 ) 3
5: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (9 10 ) 4
6: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (11 12 ) 5
7: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
8: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
9: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
10: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
11: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 10
12: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (13 14 ) 11
13: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (15 16 ) 12
14: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (17 18 ) 13
15: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (19 20 ) 14
16: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (15 16 ) 12
17: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (21 22 23 24 25 26 27 ) 15
18: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (28 29 30 31 ) 16
19: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (32 33 34 ) 17
20: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (19 20 ) 14
21: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (35 36 37 38 39 ) 18
22: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
23: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
24: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
25: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
26: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
27: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
28: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
29: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
30: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
31: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 23
32: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (40 41 42 43 44 ) 24
33: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (32 33 34 ) 17
34: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (32 33 34 ) 17
35: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
36: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
37: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
38: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
39: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 28
40: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (45 46 47 ) 29
41: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
42: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
43: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
44: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
45: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (48 49 50 ) 30
46: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (45 46 47 ) 29
47: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (45 46 47 ) 29
48: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (17 18 ) 13
49: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (48 49 50 ) 30
50: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (48 49 50 ) 30
  0:   On statement_list to state 78 with (0 2 )
  1:   On statement to state 37 with (1 )
  2:   On '{' to state 38 with (3 )
  3:   On selection_statement to state 39 with (4 )
  4:   On iteration_statement to state 40 with (5 )
  5:   On assignment_statement to state 41 with (6 )
  6:   On RETURN to state 42 with (7 )
  7:   On IF to state 43 with (8 )
  8:   On WHILE to state 44 with (9 )
  9:   On FOR to state 45 with (10 )
  10:   On ';' to state 46 with (11 )
  11:   On expression to state 47 with (12 )
  12:   On logical_or_expression to state 48 with (13 16 )
  13:   On unary_expression to state 49 with (14 48 )
  14:   On logical_and_expression to state 50 with (15 20 )
  15:   On postfix_expression to state 51 with (17 24 25 26 27 )
  16:   On unary_operator to state 52 with (18 )
  17:   On equality_expression to state 53 with (19 33 34 )
  18:   On primary_expression to state 54 with (21 )
  19:   On IDENTIFIER to state 55 with (22 23 35 )
  20:   On '-' to state 56 with (28 )
  21:   On '!' to state 57 with (29 )
  22:   On '&' to state 58 with (30 )
  23:   On '*' to state 59 with (31 )
  24:   On relational_expression to state 60 with (32 41 42 43 44 )
  25:   On INT_CONSTANT to state 61 with (36 )
  26:   On FLOAT_CONSTANT to state 62 with (37 )
  27:   On STRING_LITERAL to state 63 with (38 )
  28:   On '(' to state 64 with (39 )
  29:   On additive_expression to state 65 with (40 46 47 )
  30:   On multiplicative_expression to state 66 with (45 49 50 )


State 39:
0: [P34 1] statement -> selection_statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 40:
0: [P35 1] statement -> iteration_statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 41:
0: [P36 1] statement -> assignment_statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 42:
0: [P37 1] statement -> RETURN  . expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 79 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 43:
0: [P76 1] selection_statement -> IF  . '(' expression ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On '(' to state 80 with (0 )


State 44:
0: [P77 1] iteration_statement -> WHILE  . '(' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On '(' to state 81 with (0 )


State 45:
0: [P78 1] iteration_statement -> FOR  . '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On '(' to state 82 with (0 )


State 46:
0: [P38 1] assignment_statement -> ';'  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 47:
0: [P39 1] assignment_statement -> expression  . ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ';' to state 83 with (0 )


State 48:
0: [P40 1] expression -> logical_or_expression  .   { ';' ',' ')' ']' }  1, () -1
1: [P43 1] logical_or_expression -> logical_or_expression  . OR_OP logical_and_expression   { OR_OP ';' ',' ')' ']' }  0, () 0
  0:   On OR_OP to state 84 with (1 )
  Reduce item(s): 0 


State 49:
0: [P41 1] expression -> unary_expression  . '=' expression   { ';' ',' ')' ']' }  0, () 0
1: [P57 1] multiplicative_expression -> unary_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
  0:   On '=' to state 85 with (0 )
  Reduce item(s): 1 


State 50:
0: [P42 1] logical_or_expression -> logical_and_expression  .   { OR_OP ';' ',' ')' ']' }  1, () -1
1: [P45 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, () 0
  0:   On AND_OP to state 86 with (1 )
  Reduce item(s): 0 


State 51:
0: [P60 1] unary_expression -> postfix_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
1: [P66 1] postfix_expression -> postfix_expression  . '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
2: [P67 1] postfix_expression -> postfix_expression  . '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 1
3: [P68 1] postfix_expression -> postfix_expression  . PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 2
4: [P69 1] postfix_expression -> postfix_expression  . INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 3
  0:   On '[' to state 87 with (1 )
  1:   On '.' to state 88 with (2 )
  2:   On PTR_OP to state 89 with (3 )
  3:   On INC_OP to state 90 with (4 )
  Reduce item(s): 0 


State 52:
0: [P61 1] unary_expression -> unary_operator  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 3 4 5 6 7 ) 0
1: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (8 9 10 11 12 ) 1
2: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 2
3: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 2
4: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 3 4 5 6 7 ) 0
5: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 3 4 5 6 7 ) 0
6: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 3 4 5 6 7 ) 0
7: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 3 4 5 6 7 ) 0
8: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 2
9: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 3
10: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
11: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
12: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
  0:   On postfix_expression to state 91 with (0 4 5 6 7 )
  1:   On primary_expression to state 54 with (1 )
  2:   On IDENTIFIER to state 55 with (2 3 8 )
  3:   On INT_CONSTANT to state 61 with (9 )
  4:   On FLOAT_CONSTANT to state 62 with (10 )
  5:   On STRING_LITERAL to state 63 with (11 )
  6:   On '(' to state 64 with (12 )


State 53:
0: [P44 1] logical_and_expression -> equality_expression  .   { OR_OP AND_OP ';' ',' ')' ']' }  1, () -1
1: [P47 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, () 0
2: [P48 1] equality_expression -> equality_expression  . NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, () 1
  0:   On EQ_OP to state 92 with (1 )
  1:   On NE_OP to state 93 with (2 )
  Reduce item(s): 0 


State 54:
0: [P62 1] postfix_expression -> primary_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 55:
0: [P63 1] postfix_expression -> IDENTIFIER  . '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
1: [P64 1] postfix_expression -> IDENTIFIER  . '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
2: [P22 1] primary_expression -> IDENTIFIER  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  0:   On '(' to state 94 with (0 1 )
  Reduce item(s): 2 


State 56:
0: [P72 1] unary_operator -> '-'  .   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  1, () -1
  Reduce item(s): 0 


State 57:
0: [P73 1] unary_operator -> '!'  .   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  1, () -1
  Reduce item(s): 0 


State 58:
0: [P74 1] unary_operator -> '&'  .   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  1, () -1
  Reduce item(s): 0 


State 59:
0: [P75 1] unary_operator -> '*'  .   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  1, () -1
  Reduce item(s): 0 


State 60:
0: [P46 1] equality_expression -> relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  1, () -1
1: [P50 1] relational_expression -> relational_expression  . '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 0
2: [P51 1] relational_expression -> relational_expression  . '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 1
3: [P52 1] relational_expression -> relational_expression  . LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 2
4: [P53 1] relational_expression -> relational_expression  . GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 


State 61:
0: [P23 1] primary_expression -> INT_CONSTANT  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 62:
0: [P24 1] primary_expression -> FLOAT_CONSTANT  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 63:
0: [P25 1] primary_expression -> STRING_LITERAL  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 64:
0: [P26 1] primary_expression -> '('  . expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ')' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ')' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ')' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 99 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 65:
0: [P49 1] relational_expression -> additive_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  1, () -1
1: [P55 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 0
2: [P56 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 1
  0:   On '+' to state 100 with (1 )
  1:   On '-' to state 101 with (2 )
  Reduce item(s): 0 


State 66:
0: [P54 1] additive_expression -> multiplicative_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  1, () -1
1: [P58 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 0
2: [P59 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 1
  0:   On '*' to state 102 with (1 )
  1:   On '/' to state 103 with (2 )
  Reduce item(s): 0 


State 67:
0: [P12 4] fun_declarator -> IDENTIFIER '(' #0002 parameter_list  . ')'   { '{' }  0, () 0
1: [P17 1] parameter_list -> parameter_list  . ',' parameter_declaration   { ',' ')' }  0, () 1
  0:   On ')' to state 104 with (0 )
  1:   On ',' to state 105 with (1 )


State 68:
0: [P16 1] parameter_list -> parameter_declaration  .   { ',' ')' }  1, () -1
  Reduce item(s): 0 


State 69:
0: [P18 1] parameter_declaration -> type_specifier  . declarator   { ',' ')' }  0, (1 2 3 ) 0
1: [P19 0] declarator ->  . IDENTIFIER   { ',' ')' '[' }  0, () 1
2: [P20 0] declarator ->  . declarator '[' primary_expression ']'   { ',' ')' '[' }  0, (1 2 3 ) 0
3: [P21 0] declarator ->  . '*' declarator   { ',' ')' '[' }  0, () 2
  0:   On declarator to state 106 with (0 2 )
  1:   On IDENTIFIER to state 31 with (1 )
  2:   On '*' to state 32 with (3 )


State 70:
0: [P5 6] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list '}' ';'  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 71:
0: [P81 3] declaration -> type_specifier declarator_list ';'  .   { FOR VOID INT FLOAT RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER STRUCT '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 72:
0: [P83 2] declarator_list -> declarator_list ','  . declarator   { ';' ',' }  0, (1 2 3 ) 0
1: [P19 0] declarator ->  . IDENTIFIER   { ';' ',' '[' }  0, () 1
2: [P20 0] declarator ->  . declarator '[' primary_expression ']'   { ';' ',' '[' }  0, (1 2 3 ) 0
3: [P21 0] declarator ->  . '*' declarator   { ';' ',' '[' }  0, () 2
  0:   On declarator to state 107 with (0 2 )
  1:   On IDENTIFIER to state 31 with (1 )
  2:   On '*' to state 32 with (3 )


State 73:
0: [P20 2] declarator -> declarator '['  . primary_expression ']'   { ';' ',' ')' '[' }  0, (1 2 3 4 5 ) 0
1: [P22 0] primary_expression ->  . IDENTIFIER   { ']' }  0, () 1
2: [P23 0] primary_expression ->  . INT_CONSTANT   { ']' }  0, () 2
3: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { ']' }  0, () 3
4: [P25 0] primary_expression ->  . STRING_LITERAL   { ']' }  0, () 4
5: [P26 0] primary_expression ->  . '(' expression ')'   { ']' }  0, () 5
  0:   On primary_expression to state 108 with (0 )
  1:   On IDENTIFIER to state 109 with (1 )
  2:   On INT_CONSTANT to state 61 with (2 )
  3:   On FLOAT_CONSTANT to state 62 with (3 )
  4:   On STRING_LITERAL to state 63 with (4 )
  5:   On '(' to state 64 with (5 )


State 74:
0: [P21 2] declarator -> '*' declarator  .   { ';' ',' ')' }  1, () -1
1: [P20 1] declarator -> declarator  . '[' primary_expression ']'   { ';' ',' ')' '[' }  0, () 0
  0:   On '[' to state 73 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on '[':
	shift to state 73, removed '[' from LA-set of rule 21)


State 75:
0: [P28 3] compound_statement -> '{' statement_list '}'  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 76:
0: [P32 2] statement_list -> statement_list statement  .   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 77:
0: [P29 3] compound_statement -> '{' declaration_list #0003  . statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0, (1 2 ) 0
1: [P31 0] statement_list ->  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (3 4 5 6 7 ) 1
2: [P32 0] statement_list ->  . statement_list statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
3: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 2
4: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (8 ) 3
5: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (9 10 ) 4
6: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (11 12 ) 5
7: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
8: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
9: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
10: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
11: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 10
12: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (13 14 ) 11
13: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (15 16 ) 12
14: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (17 18 ) 13
15: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (19 20 ) 14
16: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (15 16 ) 12
17: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (21 22 23 24 25 26 27 ) 15
18: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (28 29 30 31 ) 16
19: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (32 33 34 ) 17
20: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (19 20 ) 14
21: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (35 36 37 38 39 ) 18
22: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
23: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
24: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
25: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
26: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
27: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (21 22 23 24 25 26 27 ) 15
28: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
29: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
30: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
31: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 23
32: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (40 41 42 43 44 ) 24
33: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (32 33 34 ) 17
34: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (32 33 34 ) 17
35: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
36: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
37: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
38: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
39: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 28
40: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (45 46 47 ) 29
41: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
42: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
43: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
44: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (40 41 42 43 44 ) 24
45: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (48 49 50 ) 30
46: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (45 46 47 ) 29
47: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (45 46 47 ) 29
48: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (17 18 ) 13
49: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (48 49 50 ) 30
50: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (48 49 50 ) 30
  0:   On statement_list to state 110 with (0 2 )
  1:   On statement to state 37 with (1 )
  2:   On '{' to state 38 with (3 )
  3:   On selection_statement to state 39 with (4 )
  4:   On iteration_statement to state 40 with (5 )
  5:   On assignment_statement to state 41 with (6 )
  6:   On RETURN to state 42 with (7 )
  7:   On IF to state 43 with (8 )
  8:   On WHILE to state 44 with (9 )
  9:   On FOR to state 45 with (10 )
  10:   On ';' to state 46 with (11 )
  11:   On expression to state 47 with (12 )
  12:   On logical_or_expression to state 48 with (13 16 )
  13:   On unary_expression to state 49 with (14 48 )
  14:   On logical_and_expression to state 50 with (15 20 )
  15:   On postfix_expression to state 51 with (17 24 25 26 27 )
  16:   On unary_operator to state 52 with (18 )
  17:   On equality_expression to state 53 with (19 33 34 )
  18:   On primary_expression to state 54 with (21 )
  19:   On IDENTIFIER to state 55 with (22 23 35 )
  20:   On '-' to state 56 with (28 )
  21:   On '!' to state 57 with (29 )
  22:   On '&' to state 58 with (30 )
  23:   On '*' to state 59 with (31 )
  24:   On relational_expression to state 60 with (32 41 42 43 44 )
  25:   On INT_CONSTANT to state 61 with (36 )
  26:   On FLOAT_CONSTANT to state 62 with (37 )
  27:   On STRING_LITERAL to state 63 with (38 )
  28:   On '(' to state 64 with (39 )
  29:   On additive_expression to state 65 with (40 46 47 )
  30:   On multiplicative_expression to state 66 with (45 49 50 )


State 78:
0: [P33 2] statement -> '{' statement_list  . '}'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
1: [P32 1] statement_list -> statement_list  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (2 3 4 5 6 ) 1
2: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 2
3: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 ) 3
4: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (8 9 ) 4
5: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (10 11 ) 5
6: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 10
11: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (12 13 ) 11
12: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (14 15 ) 12
13: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (16 17 ) 13
14: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (18 19 ) 14
15: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (14 15 ) 12
16: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (20 21 22 23 24 25 26 ) 15
17: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (27 28 29 30 ) 16
18: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (31 32 33 ) 17
19: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (18 19 ) 14
20: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (34 35 36 37 38 ) 18
21: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
22: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
23: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
24: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
25: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
26: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
27: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 23
31: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (39 40 41 42 43 ) 24
32: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
33: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
34: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
35: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 28
39: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (44 45 46 ) 29
40: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
41: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
42: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
43: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
44: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (47 48 49 ) 30
45: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
46: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
47: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 ) 13
48: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
49: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
  0:   On '}' to state 111 with (0 )
  1:   On statement to state 76 with (1 )
  2:   On '{' to state 38 with (2 )
  3:   On selection_statement to state 39 with (3 )
  4:   On iteration_statement to state 40 with (4 )
  5:   On assignment_statement to state 41 with (5 )
  6:   On RETURN to state 42 with (6 )
  7:   On IF to state 43 with (7 )
  8:   On WHILE to state 44 with (8 )
  9:   On FOR to state 45 with (9 )
  10:   On ';' to state 46 with (10 )
  11:   On expression to state 47 with (11 )
  12:   On logical_or_expression to state 48 with (12 15 )
  13:   On unary_expression to state 49 with (13 47 )
  14:   On logical_and_expression to state 50 with (14 19 )
  15:   On postfix_expression to state 51 with (16 23 24 25 26 )
  16:   On unary_operator to state 52 with (17 )
  17:   On equality_expression to state 53 with (18 32 33 )
  18:   On primary_expression to state 54 with (20 )
  19:   On IDENTIFIER to state 55 with (21 22 34 )
  20:   On '-' to state 56 with (27 )
  21:   On '!' to state 57 with (28 )
  22:   On '&' to state 58 with (29 )
  23:   On '*' to state 59 with (30 )
  24:   On relational_expression to state 60 with (31 40 41 42 43 )
  25:   On INT_CONSTANT to state 61 with (35 )
  26:   On FLOAT_CONSTANT to state 62 with (36 )
  27:   On STRING_LITERAL to state 63 with (37 )
  28:   On '(' to state 64 with (38 )
  29:   On additive_expression to state 65 with (39 45 46 )
  30:   On multiplicative_expression to state 66 with (44 48 49 )


State 79:
0: [P37 2] statement -> RETURN expression  . ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ';' to state 112 with (0 )


State 80:
0: [P76 2] selection_statement -> IF '('  . expression ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ')' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ')' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ')' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 113 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 81:
0: [P77 2] iteration_statement -> WHILE '('  . expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ')' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ')' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ')' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 114 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 82:
0: [P78 2] iteration_statement -> FOR '('  . expression ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 115 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 83:
0: [P39 2] assignment_statement -> expression ';'  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 84:
0: [P43 2] logical_or_expression -> logical_or_expression OR_OP  . logical_and_expression   { OR_OP ';' ',' ')' ']' }  0, (1 2 ) 0
1: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, (3 4 5 ) 1
2: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 ) 0
3: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (6 7 8 9 10 ) 2
4: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (3 4 5 ) 1
5: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (3 4 5 ) 1
6: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (11 12 13 ) 3
7: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 9 10 ) 2
8: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 9 10 ) 2
9: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 9 10 ) 2
10: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 9 10 ) 2
11: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (14 15 16 ) 4
12: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (11 12 13 ) 3
13: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (11 12 13 ) 3
14: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (17 18 ) 5
15: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (14 15 16 ) 4
16: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (14 15 16 ) 4
17: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (19 20 21 22 23 24 25 ) 6
18: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (26 27 28 29 ) 7
19: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (30 31 32 33 34 ) 8
20: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 9
21: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 9
22: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 6
23: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 6
24: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 6
25: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 6
26: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
27: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
28: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
29: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 13
30: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 9
31: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
32: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
33: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 16
34: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 17
  0:   On logical_and_expression to state 116 with (0 2 )
  1:   On equality_expression to state 53 with (1 4 5 )
  2:   On relational_expression to state 60 with (3 7 8 9 10 )
  3:   On additive_expression to state 65 with (6 12 13 )
  4:   On multiplicative_expression to state 66 with (11 15 16 )
  5:   On unary_expression to state 117 with (14 )
  6:   On postfix_expression to state 51 with (17 22 23 24 25 )
  7:   On unary_operator to state 52 with (18 )
  8:   On primary_expression to state 54 with (19 )
  9:   On IDENTIFIER to state 55 with (20 21 30 )
  10:   On '-' to state 56 with (26 )
  11:   On '!' to state 57 with (27 )
  12:   On '&' to state 58 with (28 )
  13:   On '*' to state 59 with (29 )
  14:   On INT_CONSTANT to state 61 with (31 )
  15:   On FLOAT_CONSTANT to state 62 with (32 )
  16:   On STRING_LITERAL to state 63 with (33 )
  17:   On '(' to state 64 with (34 )


State 85:
0: [P41 2] expression -> unary_expression '='  . expression   { ';' ',' ')' ']' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ';' ',' ')' ']' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ';' ',' ')' ']' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' ',' ')' ']' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' ',' ')' ']' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 118 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 86:
0: [P45 2] logical_and_expression -> logical_and_expression AND_OP  . equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 3 ) 0
1: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (4 5 6 7 8 ) 1
2: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 3 ) 0
3: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 3 ) 0
4: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (9 10 11 ) 2
5: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (4 5 6 7 8 ) 1
6: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (4 5 6 7 8 ) 1
7: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (4 5 6 7 8 ) 1
8: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (4 5 6 7 8 ) 1
9: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (12 13 14 ) 3
10: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (9 10 11 ) 2
11: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (9 10 11 ) 2
12: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (15 16 ) 4
13: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (12 13 14 ) 3
14: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (12 13 14 ) 3
15: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (17 18 19 20 21 22 23 ) 5
16: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (24 25 26 27 ) 6
17: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (28 29 30 31 32 ) 7
18: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
19: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
20: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 22 23 ) 5
21: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 22 23 ) 5
22: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 22 23 ) 5
23: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 22 23 ) 5
24: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
25: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
26: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
27: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
28: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
29: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
30: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
31: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
32: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 16
  0:   On equality_expression to state 119 with (0 2 3 )
  1:   On relational_expression to state 60 with (1 5 6 7 8 )
  2:   On additive_expression to state 65 with (4 10 11 )
  3:   On multiplicative_expression to state 66 with (9 13 14 )
  4:   On unary_expression to state 117 with (12 )
  5:   On postfix_expression to state 51 with (15 20 21 22 23 )
  6:   On unary_operator to state 52 with (16 )
  7:   On primary_expression to state 54 with (17 )
  8:   On IDENTIFIER to state 55 with (18 19 28 )
  9:   On '-' to state 56 with (24 )
  10:   On '!' to state 57 with (25 )
  11:   On '&' to state 58 with (26 )
  12:   On '*' to state 59 with (27 )
  13:   On INT_CONSTANT to state 61 with (29 )
  14:   On FLOAT_CONSTANT to state 62 with (30 )
  15:   On STRING_LITERAL to state 63 with (31 )
  16:   On '(' to state 64 with (32 )


State 87:
0: [P66 2] postfix_expression -> postfix_expression '['  . expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ']' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ']' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ']' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ']' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ']' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ']' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 120 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 88:
0: [P67 2] postfix_expression -> postfix_expression '.'  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
  0:   On IDENTIFIER to state 121 with (0 )


State 89:
0: [P68 2] postfix_expression -> postfix_expression PTR_OP  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
  0:   On IDENTIFIER to state 122 with (0 )


State 90:
0: [P69 2] postfix_expression -> postfix_expression INC_OP  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 91:
0: [P61 2] unary_expression -> unary_operator postfix_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
1: [P66 1] postfix_expression -> postfix_expression  . '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
2: [P67 1] postfix_expression -> postfix_expression  . '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 1
3: [P68 1] postfix_expression -> postfix_expression  . PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 2
4: [P69 1] postfix_expression -> postfix_expression  . INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 3
  0:   On '[' to state 87 with (1 )
  1:   On '.' to state 88 with (2 )
  2:   On PTR_OP to state 89 with (3 )
  3:   On INC_OP to state 90 with (4 )
  Reduce item(s): 0 


State 92:
0: [P47 2] equality_expression -> equality_expression EQ_OP  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 3 4 5 ) 0
1: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 ) 1
2: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
3: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
4: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
5: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
6: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (9 10 11 ) 2
7: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (6 7 8 ) 1
8: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (6 7 8 ) 1
9: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (12 13 ) 3
10: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 ) 2
11: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 ) 2
12: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (14 15 16 17 18 19 20 ) 4
13: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (21 22 23 24 ) 5
14: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (25 26 27 28 29 ) 6
15: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
16: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
17: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
18: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
19: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
20: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
21: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
22: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
23: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
24: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
25: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
26: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
27: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
28: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
29: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
  0:   On relational_expression to state 123 with (0 2 3 4 5 )
  1:   On additive_expression to state 65 with (1 7 8 )
  2:   On multiplicative_expression to state 66 with (6 10 11 )
  3:   On unary_expression to state 117 with (9 )
  4:   On postfix_expression to state 51 with (12 17 18 19 20 )
  5:   On unary_operator to state 52 with (13 )
  6:   On primary_expression to state 54 with (14 )
  7:   On IDENTIFIER to state 55 with (15 16 25 )
  8:   On '-' to state 56 with (21 )
  9:   On '!' to state 57 with (22 )
  10:   On '&' to state 58 with (23 )
  11:   On '*' to state 59 with (24 )
  12:   On INT_CONSTANT to state 61 with (26 )
  13:   On FLOAT_CONSTANT to state 62 with (27 )
  14:   On STRING_LITERAL to state 63 with (28 )
  15:   On '(' to state 64 with (29 )


State 93:
0: [P48 2] equality_expression -> equality_expression NE_OP  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, (1 2 3 4 5 ) 0
1: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (6 7 8 ) 1
2: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
3: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
4: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
5: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 4 5 ) 0
6: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (9 10 11 ) 2
7: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (6 7 8 ) 1
8: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (6 7 8 ) 1
9: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (12 13 ) 3
10: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 ) 2
11: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 ) 2
12: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (14 15 16 17 18 19 20 ) 4
13: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (21 22 23 24 ) 5
14: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (25 26 27 28 29 ) 6
15: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
16: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
17: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
18: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
19: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
20: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 19 20 ) 4
21: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
22: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
23: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
24: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
25: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 7
26: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
27: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
28: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
29: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 15
  0:   On relational_expression to state 124 with (0 2 3 4 5 )
  1:   On additive_expression to state 65 with (1 7 8 )
  2:   On multiplicative_expression to state 66 with (6 10 11 )
  3:   On unary_expression to state 117 with (9 )
  4:   On postfix_expression to state 51 with (12 17 18 19 20 )
  5:   On unary_operator to state 52 with (13 )
  6:   On primary_expression to state 54 with (14 )
  7:   On IDENTIFIER to state 55 with (15 16 25 )
  8:   On '-' to state 56 with (21 )
  9:   On '!' to state 57 with (22 )
  10:   On '&' to state 58 with (23 )
  11:   On '*' to state 59 with (24 )
  12:   On INT_CONSTANT to state 61 with (26 )
  13:   On FLOAT_CONSTANT to state 62 with (27 )
  14:   On STRING_LITERAL to state 63 with (28 )
  15:   On '(' to state 64 with (29 )


State 94:
0: [P63 2] postfix_expression -> IDENTIFIER '('  . ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
1: [P64 2] postfix_expression -> IDENTIFIER '('  . #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (2 ) 1
2: [P65 0] #0004 ->  .   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' '*' '-' '!' '&' }  1, () -1
  0:   On ')' to state 125 with (0 )
  1:   On #0004 to state 126 with (1 )
  Reduce item(s): 2 


State 95:
0: [P50 2] relational_expression -> relational_expression '<'  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 ) 0
1: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (4 5 6 ) 1
2: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
3: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
4: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (7 8 ) 2
5: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
6: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
7: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 3
8: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 4
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 ) 5
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
20: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
21: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
22: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
23: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
24: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
  0:   On additive_expression to state 127 with (0 2 3 )
  1:   On multiplicative_expression to state 66 with (1 5 6 )
  2:   On unary_expression to state 117 with (4 )
  3:   On postfix_expression to state 51 with (7 12 13 14 15 )
  4:   On unary_operator to state 52 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 20 )
  7:   On '-' to state 56 with (16 )
  8:   On '!' to state 57 with (17 )
  9:   On '&' to state 58 with (18 )
  10:   On '*' to state 59 with (19 )
  11:   On INT_CONSTANT to state 61 with (21 )
  12:   On FLOAT_CONSTANT to state 62 with (22 )
  13:   On STRING_LITERAL to state 63 with (23 )
  14:   On '(' to state 64 with (24 )


State 96:
0: [P51 2] relational_expression -> relational_expression '>'  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 ) 0
1: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (4 5 6 ) 1
2: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
3: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
4: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (7 8 ) 2
5: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
6: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
7: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 3
8: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 4
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 ) 5
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
20: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
21: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
22: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
23: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
24: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
  0:   On additive_expression to state 128 with (0 2 3 )
  1:   On multiplicative_expression to state 66 with (1 5 6 )
  2:   On unary_expression to state 117 with (4 )
  3:   On postfix_expression to state 51 with (7 12 13 14 15 )
  4:   On unary_operator to state 52 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 20 )
  7:   On '-' to state 56 with (16 )
  8:   On '!' to state 57 with (17 )
  9:   On '&' to state 58 with (18 )
  10:   On '*' to state 59 with (19 )
  11:   On INT_CONSTANT to state 61 with (21 )
  12:   On FLOAT_CONSTANT to state 62 with (22 )
  13:   On STRING_LITERAL to state 63 with (23 )
  14:   On '(' to state 64 with (24 )


State 97:
0: [P52 2] relational_expression -> relational_expression LE_OP  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 ) 0
1: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (4 5 6 ) 1
2: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
3: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
4: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (7 8 ) 2
5: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
6: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
7: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 3
8: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 4
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 ) 5
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
20: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
21: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
22: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
23: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
24: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
  0:   On additive_expression to state 129 with (0 2 3 )
  1:   On multiplicative_expression to state 66 with (1 5 6 )
  2:   On unary_expression to state 117 with (4 )
  3:   On postfix_expression to state 51 with (7 12 13 14 15 )
  4:   On unary_operator to state 52 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 20 )
  7:   On '-' to state 56 with (16 )
  8:   On '!' to state 57 with (17 )
  9:   On '&' to state 58 with (18 )
  10:   On '*' to state 59 with (19 )
  11:   On INT_CONSTANT to state 61 with (21 )
  12:   On FLOAT_CONSTANT to state 62 with (22 )
  13:   On STRING_LITERAL to state 63 with (23 )
  14:   On '(' to state 64 with (24 )


State 98:
0: [P53 2] relational_expression -> relational_expression GE_OP  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, (1 2 3 ) 0
1: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (4 5 6 ) 1
2: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
3: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
4: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (7 8 ) 2
5: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
6: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 6 ) 1
7: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 3
8: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 4
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 ) 5
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 3
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
20: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 6
21: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
22: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
23: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
24: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 14
  0:   On additive_expression to state 130 with (0 2 3 )
  1:   On multiplicative_expression to state 66 with (1 5 6 )
  2:   On unary_expression to state 117 with (4 )
  3:   On postfix_expression to state 51 with (7 12 13 14 15 )
  4:   On unary_operator to state 52 with (8 )
  5:   On primary_expression to state 54 with (9 )
  6:   On IDENTIFIER to state 55 with (10 11 20 )
  7:   On '-' to state 56 with (16 )
  8:   On '!' to state 57 with (17 )
  9:   On '&' to state 58 with (18 )
  10:   On '*' to state 59 with (19 )
  11:   On INT_CONSTANT to state 61 with (21 )
  12:   On FLOAT_CONSTANT to state 62 with (22 )
  13:   On STRING_LITERAL to state 63 with (23 )
  14:   On '(' to state 64 with (24 )


State 99:
0: [P26 2] primary_expression -> '(' expression  . ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
  0:   On ')' to state 131 with (0 )


State 100:
0: [P55 2] additive_expression -> additive_expression '+'  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
1: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 ) 1
2: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 3 ) 0
3: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 3 ) 0
4: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (6 7 8 9 10 11 12 ) 2
5: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (13 14 15 16 ) 3
6: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 ) 4
7: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
8: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
9: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
10: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
11: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
12: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
13: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 6
14: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
15: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
16: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
18: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 10
19: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
20: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
21: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
  0:   On multiplicative_expression to state 132 with (0 2 3 )
  1:   On unary_expression to state 117 with (1 )
  2:   On postfix_expression to state 51 with (4 9 10 11 12 )
  3:   On unary_operator to state 52 with (5 )
  4:   On primary_expression to state 54 with (6 )
  5:   On IDENTIFIER to state 55 with (7 8 17 )
  6:   On '-' to state 56 with (13 )
  7:   On '!' to state 57 with (14 )
  8:   On '&' to state 58 with (15 )
  9:   On '*' to state 59 with (16 )
  10:   On INT_CONSTANT to state 61 with (18 )
  11:   On FLOAT_CONSTANT to state 62 with (19 )
  12:   On STRING_LITERAL to state 63 with (20 )
  13:   On '(' to state 64 with (21 )


State 101:
0: [P56 2] additive_expression -> additive_expression '-'  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, (1 2 3 ) 0
1: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (4 5 ) 1
2: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 3 ) 0
3: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 3 ) 0
4: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (6 7 8 9 10 11 12 ) 2
5: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (13 14 15 16 ) 3
6: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (17 18 19 20 21 ) 4
7: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
8: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
9: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
10: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
11: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
12: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (6 7 8 9 10 11 12 ) 2
13: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 6
14: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
15: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
16: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 5
18: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 10
19: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
20: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
21: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 13
  0:   On multiplicative_expression to state 133 with (0 2 3 )
  1:   On unary_expression to state 117 with (1 )
  2:   On postfix_expression to state 51 with (4 9 10 11 12 )
  3:   On unary_operator to state 52 with (5 )
  4:   On primary_expression to state 54 with (6 )
  5:   On IDENTIFIER to state 55 with (7 8 17 )
  6:   On '-' to state 56 with (13 )
  7:   On '!' to state 57 with (14 )
  8:   On '&' to state 58 with (15 )
  9:   On '*' to state 59 with (16 )
  10:   On INT_CONSTANT to state 61 with (18 )
  11:   On FLOAT_CONSTANT to state 62 with (19 )
  12:   On STRING_LITERAL to state 63 with (20 )
  13:   On '(' to state 64 with (21 )


State 102:
0: [P58 2] multiplicative_expression -> multiplicative_expression '*'  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 ) 0
1: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (3 4 5 6 7 8 9 ) 1
2: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (10 11 12 13 ) 2
3: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 ) 3
4: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
5: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
6: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
7: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
8: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
9: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
10: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 5
11: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 6
12: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
13: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
14: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
15: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 9
16: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 10
17: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
18: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
  0:   On unary_expression to state 134 with (0 )
  1:   On postfix_expression to state 51 with (1 6 7 8 9 )
  2:   On unary_operator to state 52 with (2 )
  3:   On primary_expression to state 54 with (3 )
  4:   On IDENTIFIER to state 55 with (4 5 14 )
  5:   On '-' to state 56 with (10 )
  6:   On '!' to state 57 with (11 )
  7:   On '&' to state 58 with (12 )
  8:   On '*' to state 59 with (13 )
  9:   On INT_CONSTANT to state 61 with (15 )
  10:   On FLOAT_CONSTANT to state 62 with (16 )
  11:   On STRING_LITERAL to state 63 with (17 )
  12:   On '(' to state 64 with (18 )


State 103:
0: [P59 2] multiplicative_expression -> multiplicative_expression '/'  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (1 2 ) 0
1: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (3 4 5 6 7 8 9 ) 1
2: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, (10 11 12 13 ) 2
3: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (14 15 16 17 18 ) 3
4: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
5: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
6: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
7: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
8: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
9: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (3 4 5 6 7 8 9 ) 1
10: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 5
11: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 6
12: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 7
13: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 8
14: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 4
15: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 9
16: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 10
17: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 11
18: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 12
  0:   On unary_expression to state 135 with (0 )
  1:   On postfix_expression to state 51 with (1 6 7 8 9 )
  2:   On unary_operator to state 52 with (2 )
  3:   On primary_expression to state 54 with (3 )
  4:   On IDENTIFIER to state 55 with (4 5 14 )
  5:   On '-' to state 56 with (10 )
  6:   On '!' to state 57 with (11 )
  7:   On '&' to state 58 with (12 )
  8:   On '*' to state 59 with (13 )
  9:   On INT_CONSTANT to state 61 with (15 )
  10:   On FLOAT_CONSTANT to state 62 with (16 )
  11:   On STRING_LITERAL to state 63 with (17 )
  12:   On '(' to state 64 with (18 )


State 104:
0: [P12 5] fun_declarator -> IDENTIFIER '(' #0002 parameter_list ')'  .   { '{' }  1, () -1
  Reduce item(s): 0 


State 105:
0: [P17 2] parameter_list -> parameter_list ','  . parameter_declaration   { ',' ')' }  0, (1 ) 0
1: [P18 0] parameter_declaration ->  . type_specifier declarator   { ',' ')' }  0, (2 3 4 5 ) 1
2: [P8 0] type_specifier ->  . VOID   { IDENTIFIER '*' }  0, () 2
3: [P9 0] type_specifier ->  . INT   { IDENTIFIER '*' }  0, () 3
4: [P10 0] type_specifier ->  . FLOAT   { IDENTIFIER '*' }  0, () 4
5: [P11 0] type_specifier ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  0, () 5
  0:   On parameter_declaration to state 136 with (0 )
  1:   On type_specifier to state 69 with (1 )
  2:   On VOID to state 6 with (2 )
  3:   On INT to state 7 with (3 )
  4:   On FLOAT to state 8 with (4 )
  5:   On STRUCT to state 22 with (5 )


State 106:
0: [P18 2] parameter_declaration -> type_specifier declarator  .   { ',' ')' }  1, () -1
1: [P20 1] declarator -> declarator  . '[' primary_expression ']'   { ',' ')' '[' }  0, () 0
  0:   On '[' to state 73 with (1 )
  Reduce item(s): 0 


State 107:
0: [P83 3] declarator_list -> declarator_list ',' declarator  .   { ';' ',' }  1, () -1
1: [P20 1] declarator -> declarator  . '[' primary_expression ']'   { ';' ',' '[' }  0, () 0
  0:   On '[' to state 73 with (1 )
  Reduce item(s): 0 


State 108:
0: [P20 3] declarator -> declarator '[' primary_expression  . ']'   { ';' ',' ')' '[' }  0, () 0
  0:   On ']' to state 137 with (0 )


State 109:
0: [P22 1] primary_expression -> IDENTIFIER  .   { ']' }  1, () -1
  Reduce item(s): 0 


State 110:
0: [P29 4] compound_statement -> '{' declaration_list #0003 statement_list  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0, () 0
1: [P32 1] statement_list -> statement_list  . statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (2 3 4 5 6 ) 1
2: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 2
3: [P34 0] statement ->  . selection_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 ) 3
4: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (8 9 ) 4
5: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (10 11 ) 5
6: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 10
11: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (12 13 ) 11
12: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (14 15 ) 12
13: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (16 17 ) 13
14: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (18 19 ) 14
15: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (14 15 ) 12
16: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (20 21 22 23 24 25 26 ) 15
17: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (27 28 29 30 ) 16
18: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (31 32 33 ) 17
19: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (18 19 ) 14
20: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (34 35 36 37 38 ) 18
21: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
22: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
23: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
24: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
25: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
26: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (20 21 22 23 24 25 26 ) 15
27: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 23
31: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (39 40 41 42 43 ) 24
32: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
33: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (31 32 33 ) 17
34: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 19
35: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 28
39: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (44 45 46 ) 29
40: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
41: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
42: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
43: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (39 40 41 42 43 ) 24
44: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (47 48 49 ) 30
45: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
46: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (44 45 46 ) 29
47: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 ) 13
48: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
49: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (47 48 49 ) 30
  0:   On '}' to state 138 with (0 )
  1:   On statement to state 76 with (1 )
  2:   On '{' to state 38 with (2 )
  3:   On selection_statement to state 39 with (3 )
  4:   On iteration_statement to state 40 with (4 )
  5:   On assignment_statement to state 41 with (5 )
  6:   On RETURN to state 42 with (6 )
  7:   On IF to state 43 with (7 )
  8:   On WHILE to state 44 with (8 )
  9:   On FOR to state 45 with (9 )
  10:   On ';' to state 46 with (10 )
  11:   On expression to state 47 with (11 )
  12:   On logical_or_expression to state 48 with (12 15 )
  13:   On unary_expression to state 49 with (13 47 )
  14:   On logical_and_expression to state 50 with (14 19 )
  15:   On postfix_expression to state 51 with (16 23 24 25 26 )
  16:   On unary_operator to state 52 with (17 )
  17:   On equality_expression to state 53 with (18 32 33 )
  18:   On primary_expression to state 54 with (20 )
  19:   On IDENTIFIER to state 55 with (21 22 34 )
  20:   On '-' to state 56 with (27 )
  21:   On '!' to state 57 with (28 )
  22:   On '&' to state 58 with (29 )
  23:   On '*' to state 59 with (30 )
  24:   On relational_expression to state 60 with (31 40 41 42 43 )
  25:   On INT_CONSTANT to state 61 with (35 )
  26:   On FLOAT_CONSTANT to state 62 with (36 )
  27:   On STRING_LITERAL to state 63 with (37 )
  28:   On '(' to state 64 with (38 )
  29:   On additive_expression to state 65 with (39 45 46 )
  30:   On multiplicative_expression to state 66 with (44 48 49 )


State 111:
0: [P33 3] statement -> '{' statement_list '}'  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 112:
0: [P37 3] statement -> RETURN expression ';'  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 113:
0: [P76 3] selection_statement -> IF '(' expression  . ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ')' to state 139 with (0 )


State 114:
0: [P77 3] iteration_statement -> WHILE '(' expression  . ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ')' to state 140 with (0 )


State 115:
0: [P78 3] iteration_statement -> FOR '(' expression  . ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ';' to state 141 with (0 )


State 116:
0: [P43 3] logical_or_expression -> logical_or_expression OR_OP logical_and_expression  .   { OR_OP ';' ',' ')' ']' }  1, () -1
1: [P45 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { OR_OP AND_OP ';' ',' ')' ']' }  0, () 0
  0:   On AND_OP to state 86 with (1 )
  Reduce item(s): 0 


State 117:
0: [P57 1] multiplicative_expression -> unary_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
  Reduce item(s): 0 


State 118:
0: [P41 3] expression -> unary_expression '=' expression  .   { ';' ',' ')' ']' }  1, () -1
  Reduce item(s): 0 


State 119:
0: [P45 3] logical_and_expression -> logical_and_expression AND_OP equality_expression  .   { OR_OP AND_OP ';' ',' ')' ']' }  1, () -1
1: [P47 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, () 0
2: [P48 1] equality_expression -> equality_expression  . NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  0, () 1
  0:   On EQ_OP to state 92 with (1 )
  1:   On NE_OP to state 93 with (2 )
  Reduce item(s): 0 


State 120:
0: [P66 3] postfix_expression -> postfix_expression '[' expression  . ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
  0:   On ']' to state 142 with (0 )


State 121:
0: [P67 3] postfix_expression -> postfix_expression '.' IDENTIFIER  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 122:
0: [P68 3] postfix_expression -> postfix_expression PTR_OP IDENTIFIER  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 123:
0: [P47 3] equality_expression -> equality_expression EQ_OP relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  1, () -1
1: [P50 1] relational_expression -> relational_expression  . '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 0
2: [P51 1] relational_expression -> relational_expression  . '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 1
3: [P52 1] relational_expression -> relational_expression  . LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 2
4: [P53 1] relational_expression -> relational_expression  . GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 


State 124:
0: [P48 3] equality_expression -> equality_expression NE_OP relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' }  1, () -1
1: [P50 1] relational_expression -> relational_expression  . '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 0
2: [P51 1] relational_expression -> relational_expression  . '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 1
3: [P52 1] relational_expression -> relational_expression  . LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 2
4: [P53 1] relational_expression -> relational_expression  . GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  0, () 3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 


State 125:
0: [P63 3] postfix_expression -> IDENTIFIER '(' ')'  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 126:
0: [P64 3] postfix_expression -> IDENTIFIER '(' #0004  . expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, (1 2 ) 0
1: [P70 0] expression_list ->  . expression   { ',' ')' }  0, (3 4 ) 1
2: [P71 0] expression_list ->  . expression_list ',' expression   { ',' ')' }  0, (1 2 ) 0
3: [P40 0] expression ->  . logical_or_expression   { ',' ')' }  0, (5 6 ) 2
4: [P41 0] expression ->  . unary_expression '=' expression   { ',' ')' }  0, (7 8 ) 3
5: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ',' ')' }  0, (9 10 ) 4
6: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ',' ')' }  0, (5 6 ) 2
7: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ',' ')' '*' '<' '>' '+' '-' '/' }  0, (11 12 13 14 15 16 17 ) 5
8: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ',' ')' '*' '<' '>' '+' '-' '/' }  0, (18 19 20 21 ) 6
9: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ',' ')' }  0, (22 23 24 ) 7
10: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ',' ')' }  0, (9 10 ) 4
11: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (25 26 27 28 29 ) 8
12: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 9
13: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 9
14: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (11 12 13 14 15 16 17 ) 5
15: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (11 12 13 14 15 16 17 ) 5
16: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (11 12 13 14 15 16 17 ) 5
17: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (11 12 13 14 15 16 17 ) 5
18: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
19: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
20: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
21: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 13
22: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (30 31 32 33 34 ) 14
23: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (22 23 24 ) 7
24: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (22 23 24 ) 7
25: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 9
26: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
27: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
28: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
29: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
30: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (35 36 37 ) 19
31: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (30 31 32 33 34 ) 14
32: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (30 31 32 33 34 ) 14
33: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (30 31 32 33 34 ) 14
34: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (30 31 32 33 34 ) 14
35: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (38 39 40 ) 20
36: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (35 36 37 ) 19
37: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (35 36 37 ) 19
38: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (7 8 ) 3
39: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (38 39 40 ) 20
40: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (38 39 40 ) 20
  0:   On expression_list to state 143 with (0 2 )
  1:   On expression to state 144 with (1 )
  2:   On logical_or_expression to state 48 with (3 6 )
  3:   On unary_expression to state 49 with (4 38 )
  4:   On logical_and_expression to state 50 with (5 10 )
  5:   On postfix_expression to state 51 with (7 14 15 16 17 )
  6:   On unary_operator to state 52 with (8 )
  7:   On equality_expression to state 53 with (9 23 24 )
  8:   On primary_expression to state 54 with (11 )
  9:   On IDENTIFIER to state 55 with (12 13 25 )
  10:   On '-' to state 56 with (18 )
  11:   On '!' to state 57 with (19 )
  12:   On '&' to state 58 with (20 )
  13:   On '*' to state 59 with (21 )
  14:   On relational_expression to state 60 with (22 31 32 33 34 )
  15:   On INT_CONSTANT to state 61 with (26 )
  16:   On FLOAT_CONSTANT to state 62 with (27 )
  17:   On STRING_LITERAL to state 63 with (28 )
  18:   On '(' to state 64 with (29 )
  19:   On additive_expression to state 65 with (30 36 37 )
  20:   On multiplicative_expression to state 66 with (35 39 40 )


State 127:
0: [P50 3] relational_expression -> relational_expression '<' additive_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  1, () -1
1: [P55 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 0
2: [P56 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 1
  0:   On '+' to state 100 with (1 )
  1:   On '-' to state 101 with (2 )
  Reduce item(s): 0 


State 128:
0: [P51 3] relational_expression -> relational_expression '>' additive_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  1, () -1
1: [P55 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 0
2: [P56 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 1
  0:   On '+' to state 100 with (1 )
  1:   On '-' to state 101 with (2 )
  Reduce item(s): 0 


State 129:
0: [P52 3] relational_expression -> relational_expression LE_OP additive_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  1, () -1
1: [P55 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 0
2: [P56 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 1
  0:   On '+' to state 100 with (1 )
  1:   On '-' to state 101 with (2 )
  Reduce item(s): 0 


State 130:
0: [P53 3] relational_expression -> relational_expression GE_OP additive_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' }  1, () -1
1: [P55 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 0
2: [P56 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  0, () 1
  0:   On '+' to state 100 with (1 )
  1:   On '-' to state 101 with (2 )
  Reduce item(s): 0 


State 131:
0: [P26 3] primary_expression -> '(' expression ')'  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 132:
0: [P55 3] additive_expression -> additive_expression '+' multiplicative_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  1, () -1
1: [P58 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 0
2: [P59 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 1
  0:   On '*' to state 102 with (1 )
  1:   On '/' to state 103 with (2 )
  Reduce item(s): 0 


State 133:
0: [P56 3] additive_expression -> additive_expression '-' multiplicative_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' ']' '<' '>' '+' '-' }  1, () -1
1: [P58 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 0
2: [P59 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  0, () 1
  0:   On '*' to state 102 with (1 )
  1:   On '/' to state 103 with (2 )
  Reduce item(s): 0 


State 134:
0: [P58 3] multiplicative_expression -> multiplicative_expression '*' unary_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
  Reduce item(s): 0 


State 135:
0: [P59 3] multiplicative_expression -> multiplicative_expression '/' unary_expression  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' ',' ')' '*' ']' '<' '>' '+' '-' '/' }  1, () -1
  Reduce item(s): 0 


State 136:
0: [P17 3] parameter_list -> parameter_list ',' parameter_declaration  .   { ',' ')' }  1, () -1
  Reduce item(s): 0 


State 137:
0: [P20 4] declarator -> declarator '[' primary_expression ']'  .   { ';' ',' ')' '[' }  1, () -1
  Reduce item(s): 0 


State 138:
0: [P29 5] compound_statement -> '{' declaration_list #0003 statement_list '}'  .   { VOID INT FLOAT STRUCT <EOF> }  1, () -1
  Reduce item(s): 0 


State 139:
0: [P76 4] selection_statement -> IF '(' expression ')'  . statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 3 4 5 ) 0
1: [P33 0] statement ->  . '{' statement_list '}'   { ELSE }  0, () 1
2: [P34 0] statement ->  . selection_statement   { ELSE }  0, (6 ) 2
3: [P35 0] statement ->  . iteration_statement   { ELSE }  0, (7 8 ) 3
4: [P36 0] statement ->  . assignment_statement   { ELSE }  0, (9 10 ) 4
5: [P37 0] statement ->  . RETURN expression ';'   { ELSE }  0, () 5
6: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { ELSE }  0, () 6
7: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { ELSE }  0, () 7
8: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { ELSE }  0, () 8
9: [P38 0] assignment_statement ->  . ';'   { ELSE }  0, () 9
10: [P39 0] assignment_statement ->  . expression ';'   { ELSE }  0, (11 12 ) 10
11: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (13 14 ) 11
12: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (15 16 ) 12
13: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (17 18 ) 13
14: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (13 14 ) 11
15: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (19 20 21 22 23 24 25 ) 14
16: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (26 27 28 29 ) 15
17: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (30 31 32 ) 16
18: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (17 18 ) 13
19: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (33 34 35 36 37 ) 17
20: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
21: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
22: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
23: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
24: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
25: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
26: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 19
27: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (38 39 40 41 42 ) 23
31: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
32: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
33: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
34: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 24
35: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (43 44 45 ) 28
39: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
40: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
41: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
42: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
43: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (46 47 48 ) 29
44: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
45: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
46: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (15 16 ) 12
47: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
48: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
  0:   On statement to state 145 with (0 )
  1:   On '{' to state 38 with (1 )
  2:   On selection_statement to state 39 with (2 )
  3:   On iteration_statement to state 40 with (3 )
  4:   On assignment_statement to state 41 with (4 )
  5:   On RETURN to state 42 with (5 )
  6:   On IF to state 43 with (6 )
  7:   On WHILE to state 44 with (7 )
  8:   On FOR to state 45 with (8 )
  9:   On ';' to state 46 with (9 )
  10:   On expression to state 47 with (10 )
  11:   On logical_or_expression to state 48 with (11 14 )
  12:   On unary_expression to state 49 with (12 46 )
  13:   On logical_and_expression to state 50 with (13 18 )
  14:   On postfix_expression to state 51 with (15 22 23 24 25 )
  15:   On unary_operator to state 52 with (16 )
  16:   On equality_expression to state 53 with (17 31 32 )
  17:   On primary_expression to state 54 with (19 )
  18:   On IDENTIFIER to state 55 with (20 21 33 )
  19:   On '-' to state 56 with (26 )
  20:   On '!' to state 57 with (27 )
  21:   On '&' to state 58 with (28 )
  22:   On '*' to state 59 with (29 )
  23:   On relational_expression to state 60 with (30 39 40 41 42 )
  24:   On INT_CONSTANT to state 61 with (34 )
  25:   On FLOAT_CONSTANT to state 62 with (35 )
  26:   On STRING_LITERAL to state 63 with (36 )
  27:   On '(' to state 64 with (37 )
  28:   On additive_expression to state 65 with (38 44 45 )
  29:   On multiplicative_expression to state 66 with (43 47 48 )


State 140:
0: [P77 4] iteration_statement -> WHILE '(' expression ')'  . statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 3 4 5 ) 0
1: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 1
2: [P34 0] statement ->  . selection_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (6 ) 2
3: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 8 ) 3
4: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (9 10 ) 4
5: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 5
6: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (11 12 ) 10
11: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (13 14 ) 11
12: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (15 16 ) 12
13: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (17 18 ) 13
14: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (13 14 ) 11
15: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (19 20 21 22 23 24 25 ) 14
16: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (26 27 28 29 ) 15
17: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (30 31 32 ) 16
18: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (17 18 ) 13
19: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (33 34 35 36 37 ) 17
20: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
21: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
22: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
23: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
24: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
25: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
26: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 19
27: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (38 39 40 41 42 ) 23
31: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
32: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
33: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
34: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 24
35: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (43 44 45 ) 28
39: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
40: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
41: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
42: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
43: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (46 47 48 ) 29
44: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
45: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
46: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (15 16 ) 12
47: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
48: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
  0:   On statement to state 146 with (0 )
  1:   On '{' to state 38 with (1 )
  2:   On selection_statement to state 39 with (2 )
  3:   On iteration_statement to state 40 with (3 )
  4:   On assignment_statement to state 41 with (4 )
  5:   On RETURN to state 42 with (5 )
  6:   On IF to state 43 with (6 )
  7:   On WHILE to state 44 with (7 )
  8:   On FOR to state 45 with (8 )
  9:   On ';' to state 46 with (9 )
  10:   On expression to state 47 with (10 )
  11:   On logical_or_expression to state 48 with (11 14 )
  12:   On unary_expression to state 49 with (12 46 )
  13:   On logical_and_expression to state 50 with (13 18 )
  14:   On postfix_expression to state 51 with (15 22 23 24 25 )
  15:   On unary_operator to state 52 with (16 )
  16:   On equality_expression to state 53 with (17 31 32 )
  17:   On primary_expression to state 54 with (19 )
  18:   On IDENTIFIER to state 55 with (20 21 33 )
  19:   On '-' to state 56 with (26 )
  20:   On '!' to state 57 with (27 )
  21:   On '&' to state 58 with (28 )
  22:   On '*' to state 59 with (29 )
  23:   On relational_expression to state 60 with (30 39 40 41 42 )
  24:   On INT_CONSTANT to state 61 with (34 )
  25:   On FLOAT_CONSTANT to state 62 with (35 )
  26:   On STRING_LITERAL to state 63 with (36 )
  27:   On '(' to state 64 with (37 )
  28:   On additive_expression to state 65 with (38 44 45 )
  29:   On multiplicative_expression to state 66 with (43 47 48 )


State 141:
0: [P78 4] iteration_statement -> FOR '(' expression ';'  . expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 147 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 142:
0: [P66 4] postfix_expression -> postfix_expression '[' expression ']'  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 143:
0: [P64 4] postfix_expression -> IDENTIFIER '(' #0004 expression_list  . ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  0, () 0
1: [P71 1] expression_list -> expression_list  . ',' expression   { ',' ')' }  0, () 1
  0:   On ')' to state 148 with (0 )
  1:   On ',' to state 149 with (1 )


State 144:
0: [P70 1] expression_list -> expression  .   { ',' ')' }  1, () -1
  Reduce item(s): 0 


State 145:
0: [P76 5] selection_statement -> IF '(' expression ')' statement  . ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ELSE to state 150 with (0 )


State 146:
0: [P77 5] iteration_statement -> WHILE '(' expression ')' statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 147:
0: [P78 5] iteration_statement -> FOR '(' expression ';' expression  . ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ';' to state 151 with (0 )


State 148:
0: [P64 5] postfix_expression -> IDENTIFIER '(' #0004 expression_list ')'  .   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' ',' ')' '*' '[' ']' '<' '>' '+' '-' '/' '.' }  1, () -1
  Reduce item(s): 0 


State 149:
0: [P71 2] expression_list -> expression_list ','  . expression   { ',' ')' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ',' ')' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ',' ')' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ',' ')' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ',' ')' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ',' ')' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ',' ')' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ',' ')' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ',' ')' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ',' ')' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ',' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ',' ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 152 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 150:
0: [P76 6] selection_statement -> IF '(' expression ')' statement ELSE  . statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 3 4 5 ) 0
1: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 1
2: [P34 0] statement ->  . selection_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (6 ) 2
3: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 8 ) 3
4: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (9 10 ) 4
5: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 5
6: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (11 12 ) 10
11: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (13 14 ) 11
12: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (15 16 ) 12
13: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (17 18 ) 13
14: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (13 14 ) 11
15: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (19 20 21 22 23 24 25 ) 14
16: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (26 27 28 29 ) 15
17: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (30 31 32 ) 16
18: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (17 18 ) 13
19: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (33 34 35 36 37 ) 17
20: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
21: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
22: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
23: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
24: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
25: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
26: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 19
27: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (38 39 40 41 42 ) 23
31: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
32: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
33: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
34: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 24
35: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (43 44 45 ) 28
39: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
40: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
41: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
42: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
43: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (46 47 48 ) 29
44: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
45: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
46: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (15 16 ) 12
47: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
48: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
  0:   On statement to state 153 with (0 )
  1:   On '{' to state 38 with (1 )
  2:   On selection_statement to state 39 with (2 )
  3:   On iteration_statement to state 40 with (3 )
  4:   On assignment_statement to state 41 with (4 )
  5:   On RETURN to state 42 with (5 )
  6:   On IF to state 43 with (6 )
  7:   On WHILE to state 44 with (7 )
  8:   On FOR to state 45 with (8 )
  9:   On ';' to state 46 with (9 )
  10:   On expression to state 47 with (10 )
  11:   On logical_or_expression to state 48 with (11 14 )
  12:   On unary_expression to state 49 with (12 46 )
  13:   On logical_and_expression to state 50 with (13 18 )
  14:   On postfix_expression to state 51 with (15 22 23 24 25 )
  15:   On unary_operator to state 52 with (16 )
  16:   On equality_expression to state 53 with (17 31 32 )
  17:   On primary_expression to state 54 with (19 )
  18:   On IDENTIFIER to state 55 with (20 21 33 )
  19:   On '-' to state 56 with (26 )
  20:   On '!' to state 57 with (27 )
  21:   On '&' to state 58 with (28 )
  22:   On '*' to state 59 with (29 )
  23:   On relational_expression to state 60 with (30 39 40 41 42 )
  24:   On INT_CONSTANT to state 61 with (34 )
  25:   On FLOAT_CONSTANT to state 62 with (35 )
  26:   On STRING_LITERAL to state 63 with (36 )
  27:   On '(' to state 64 with (37 )
  28:   On additive_expression to state 65 with (38 44 45 )
  29:   On multiplicative_expression to state 66 with (43 47 48 )


State 151:
0: [P78 6] iteration_statement -> FOR '(' expression ';' expression ';'  . expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 ) 0
1: [P40 0] expression ->  . logical_or_expression   { ')' }  0, (3 4 ) 1
2: [P41 0] expression ->  . unary_expression '=' expression   { ')' }  0, (5 6 ) 2
3: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ')' }  0, (7 8 ) 3
4: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ')' }  0, (3 4 ) 1
5: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (9 10 11 12 13 14 15 ) 4
6: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ')' '*' '<' '>' '+' '-' '/' }  0, (16 17 18 19 ) 5
7: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  0, (20 21 22 ) 6
8: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  0, (7 8 ) 3
9: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (23 24 25 26 27 ) 7
10: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
11: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
12: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
13: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
14: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
15: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (9 10 11 12 13 14 15 ) 4
16: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 9
17: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 10
18: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 11
19: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 12
20: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (28 29 30 31 32 ) 13
21: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
22: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  0, (20 21 22 ) 6
23: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 8
24: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 14
25: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 15
26: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 16
27: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ')' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 17
28: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (33 34 35 ) 18
29: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
30: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
31: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
32: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  0, (28 29 30 31 32 ) 13
33: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (36 37 38 ) 19
34: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
35: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  0, (33 34 35 ) 18
36: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (5 6 ) 2
37: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
38: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ')' '*' '<' '>' '+' '-' '/' }  0, (36 37 38 ) 19
  0:   On expression to state 154 with (0 )
  1:   On logical_or_expression to state 48 with (1 4 )
  2:   On unary_expression to state 49 with (2 36 )
  3:   On logical_and_expression to state 50 with (3 8 )
  4:   On postfix_expression to state 51 with (5 12 13 14 15 )
  5:   On unary_operator to state 52 with (6 )
  6:   On equality_expression to state 53 with (7 21 22 )
  7:   On primary_expression to state 54 with (9 )
  8:   On IDENTIFIER to state 55 with (10 11 23 )
  9:   On '-' to state 56 with (16 )
  10:   On '!' to state 57 with (17 )
  11:   On '&' to state 58 with (18 )
  12:   On '*' to state 59 with (19 )
  13:   On relational_expression to state 60 with (20 29 30 31 32 )
  14:   On INT_CONSTANT to state 61 with (24 )
  15:   On FLOAT_CONSTANT to state 62 with (25 )
  16:   On STRING_LITERAL to state 63 with (26 )
  17:   On '(' to state 64 with (27 )
  18:   On additive_expression to state 65 with (28 34 35 )
  19:   On multiplicative_expression to state 66 with (33 37 38 )


State 152:
0: [P71 3] expression_list -> expression_list ',' expression  .   { ',' ')' }  1, () -1
  Reduce item(s): 0 


State 153:
0: [P76 7] selection_statement -> IF '(' expression ')' statement ELSE statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 


State 154:
0: [P78 7] iteration_statement -> FOR '(' expression ';' expression ';' expression  . ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 0
  0:   On ')' to state 155 with (0 )


State 155:
0: [P78 8] iteration_statement -> FOR '(' expression ';' expression ';' expression ')'  . statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (1 2 3 4 5 ) 0
1: [P33 0] statement ->  . '{' statement_list '}'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 1
2: [P34 0] statement ->  . selection_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (6 ) 2
3: [P35 0] statement ->  . iteration_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (7 8 ) 3
4: [P36 0] statement ->  . assignment_statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (9 10 ) 4
5: [P37 0] statement ->  . RETURN expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 5
6: [P76 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 6
7: [P77 0] iteration_statement ->  . WHILE '(' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 7
8: [P78 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 8
9: [P38 0] assignment_statement ->  . ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, () 9
10: [P39 0] assignment_statement ->  . expression ';'   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  0, (11 12 ) 10
11: [P40 0] expression ->  . logical_or_expression   { ';' }  0, (13 14 ) 11
12: [P41 0] expression ->  . unary_expression '=' expression   { ';' }  0, (15 16 ) 12
13: [P42 0] logical_or_expression ->  . logical_and_expression   { OR_OP ';' }  0, (17 18 ) 13
14: [P43 0] logical_or_expression ->  . logical_or_expression OR_OP logical_and_expression   { OR_OP ';' }  0, (13 14 ) 11
15: [P60 0] unary_expression ->  . postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (19 20 21 22 23 24 25 ) 14
16: [P61 0] unary_expression ->  . unary_operator postfix_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP '=' ';' '*' '<' '>' '+' '-' '/' }  0, (26 27 28 29 ) 15
17: [P44 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  0, (30 31 32 ) 16
18: [P45 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  0, (17 18 ) 13
19: [P62 0] postfix_expression ->  . primary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (33 34 35 36 37 ) 17
20: [P63 0] postfix_expression ->  . IDENTIFIER '(' ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
21: [P64 0] postfix_expression ->  . IDENTIFIER '(' #0004 expression_list ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
22: [P66 0] postfix_expression ->  . postfix_expression '[' expression ']'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
23: [P67 0] postfix_expression ->  . postfix_expression '.' IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
24: [P68 0] postfix_expression ->  . postfix_expression PTR_OP IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
25: [P69 0] postfix_expression ->  . postfix_expression INC_OP   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, (19 20 21 22 23 24 25 ) 14
26: [P72 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 19
27: [P73 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 20
28: [P74 0] unary_operator ->  . '&'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 21
29: [P75 0] unary_operator ->  . '*'   { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '(' }  0, () 22
30: [P46 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (38 39 40 41 42 ) 23
31: [P47 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
32: [P48 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  0, (30 31 32 ) 16
33: [P22 0] primary_expression ->  . IDENTIFIER   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 18
34: [P23 0] primary_expression ->  . INT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 24
35: [P24 0] primary_expression ->  . FLOAT_CONSTANT   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 25
36: [P25 0] primary_expression ->  . STRING_LITERAL   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 26
37: [P26 0] primary_expression ->  . '(' expression ')'   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '=' ';' '*' '[' '<' '>' '+' '-' '/' '.' }  0, () 27
38: [P49 0] relational_expression ->  . additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (43 44 45 ) 28
39: [P50 0] relational_expression ->  . relational_expression '<' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
40: [P51 0] relational_expression ->  . relational_expression '>' additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
41: [P52 0] relational_expression ->  . relational_expression LE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
42: [P53 0] relational_expression ->  . relational_expression GE_OP additive_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  0, (38 39 40 41 42 ) 23
43: [P54 0] additive_expression ->  . multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (46 47 48 ) 29
44: [P55 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
45: [P56 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  0, (43 44 45 ) 28
46: [P57 0] multiplicative_expression ->  . unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (15 16 ) 12
47: [P58 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
48: [P59 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { LE_OP GE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  0, (46 47 48 ) 29
  0:   On statement to state 156 with (0 )
  1:   On '{' to state 38 with (1 )
  2:   On selection_statement to state 39 with (2 )
  3:   On iteration_statement to state 40 with (3 )
  4:   On assignment_statement to state 41 with (4 )
  5:   On RETURN to state 42 with (5 )
  6:   On IF to state 43 with (6 )
  7:   On WHILE to state 44 with (7 )
  8:   On FOR to state 45 with (8 )
  9:   On ';' to state 46 with (9 )
  10:   On expression to state 47 with (10 )
  11:   On logical_or_expression to state 48 with (11 14 )
  12:   On unary_expression to state 49 with (12 46 )
  13:   On logical_and_expression to state 50 with (13 18 )
  14:   On postfix_expression to state 51 with (15 22 23 24 25 )
  15:   On unary_operator to state 52 with (16 )
  16:   On equality_expression to state 53 with (17 31 32 )
  17:   On primary_expression to state 54 with (19 )
  18:   On IDENTIFIER to state 55 with (20 21 33 )
  19:   On '-' to state 56 with (26 )
  20:   On '!' to state 57 with (27 )
  21:   On '&' to state 58 with (28 )
  22:   On '*' to state 59 with (29 )
  23:   On relational_expression to state 60 with (30 39 40 41 42 )
  24:   On INT_CONSTANT to state 61 with (34 )
  25:   On FLOAT_CONSTANT to state 62 with (35 )
  26:   On STRING_LITERAL to state 63 with (36 )
  27:   On '(' to state 64 with (37 )
  28:   On additive_expression to state 65 with (38 44 45 )
  29:   On multiplicative_expression to state 66 with (43 47 48 )


State 156:
0: [P78 9] iteration_statement -> FOR '(' expression ';' expression ';' expression ')' statement  .   { FOR RETURN IF ELSE WHILE INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL IDENTIFIER '{' '}' ';' '(' '*' '-' '!' '&' }  1, () -1
  Reduce item(s): 0 




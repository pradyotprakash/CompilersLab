digraph G {ordering=out;

    parse(): Parsing starts
    push(state 0)
    ==
    nextToken(): using 'INT'
    lookup(0, 'INT'): shift 5 ('INT' processed)
    push(state 5)
    ==
    lookup(5, '_UNDETERMINED_'): default reduction by rule 5
    executeAction(): of rule 5 ...
2[label="type_specifier"]
1[label="INT"]
2 -> 1
    ... action of rule 5 completed
    pop(1) from stack having size 2
    pop(): next state: 0, token: 'type_specifier'
    reduce(): by rule 5 to N-terminal 'type_specifier'
    ==
    lookup(0, 'type_specifier'): shift 3 ('type_specifier' processed)
    push(state 3)
    ==
    nextToken(): using 'IDENTIFIER'
    lookup(3, 'IDENTIFIER'): shift 9 ('IDENTIFIER' processed)
    push(state 9)
    ==
    nextToken(): using `(' (40)
    lookup(9, `(' (40)): shift 12 (`(' (40) processed)
    push(state 12)
    ==
    nextToken(): using `)' (41)
    lookup(12, `)' (41)): shift 31 (`)' (41) processed)
    push(state 31)
    ==
    lookup(31, '_UNDETERMINED_'): default reduction by rule 8
    executeAction(): of rule 8 ...
6[label="fun_declarator"]
5[label="IDENTIFIER"]
4[label="("]
3[label=")"]
6 -> 5
6 -> 4
6 -> 3
    ... action of rule 8 completed
    pop(3) from stack having size 5
    pop(): next state: 3, token: 'fun_declarator'
    reduce(): by rule 8 to N-terminal 'fun_declarator'
    ==
    lookup(3, 'fun_declarator'): shift 8 ('fun_declarator' processed)
    push(state 8)
    ==
    nextToken(): using `{' (123)
    lookup(8, `{' (123)): shift 11 (`{' (123) processed)
    push(state 11)
    ==

    nextToken(): using 'INT'
    lookup(11, 'INT'): shift 5 ('INT' processed)
    push(state 5)
    ==
    lookup(5, '_UNDETERMINED_'): default reduction by rule 5
    executeAction(): of rule 5 ...
8[label="type_specifier"]
7[label="INT"]
8 -> 7
    ... action of rule 5 completed
    pop(1) from stack having size 5
    pop(): next state: 11, token: 'type_specifier'
    reduce(): by rule 5 to N-terminal 'type_specifier'
    ==
    lookup(11, 'type_specifier'): shift 23 ('type_specifier' processed)
    push(state 23)
    ==
    nextToken(): using 'IDENTIFIER'
    lookup(23, 'IDENTIFIER'): shift 59 ('IDENTIFIER' processed)
    push(state 59)
    ==
    lookup(59, '_UNDETERMINED_'): default reduction by rule 12
    executeAction(): of rule 12 ...
10[label="declarator"]
9[label="IDENTIFIER"]
10 -> 9
    ... action of rule 12 completed
    pop(1) from stack having size 6
    pop(): next state: 23, token: 'declarator'
    reduce(): by rule 12 to N-terminal 'declarator'
    ==
    lookup(23, 'declarator'): shift 58 ('declarator' processed)
    push(state 58)
    ==
    nextToken(): using `;' (59)
    lookup(58, `;' (59)): default reduction by rule 70
    executeAction(): of rule 70 ...
11[label="declarator_list"]
11 -> 10
    ... action of rule 70 completed
    pop(1) from stack having size 6
    pop(): next state: 23, token: 'declarator_list'
    reduce(): by rule 70 to N-terminal 'declarator_list'
    ==
    lookup(23, 'declarator_list'): shift 57 ('declarator_list' processed)
    push(state 57)
    ==
    lookup(57, `;' (59)): shift 88 (`;' (59) processed)
    push(state 88)
    ==
    lookup(88, '_UNDETERMINED_'): default reduction by rule 69
    executeAction(): of rule 69 ...
13[label="declaration"]
12[label=";"]
13 -> 8
13 -> 11
13 -> 12
    ... action of rule 69 completed
    pop(3) from stack having size 7
    pop(): next state: 11, token: 'declaration'
    reduce(): by rule 69 to N-terminal 'declaration'
    ==
    lookup(11, 'declaration'): shift 17 ('declaration' processed)
    push(state 17)
    ==
    lookup(17, '_UNDETERMINED_'): default reduction by rule 67
    executeAction(): of rule 67 ...
14[label="declaration_list"]
14 -> 13
    ... action of rule 67 completed
    pop(1) from stack having size 5
    pop(): next state: 11, token: 'declaration_list'
    reduce(): by rule 67 to N-terminal 'declaration_list'
    ==
    lookup(11, 'declaration_list'): shift 15 ('declaration_list' processed)
    push(state 15)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(15, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
16[label="l_expression"]
15[label="IDENTIFIER"]
16 -> 15
    ... action of rule 58 completed
    pop(1) from stack having size 6
    pop(): next state: 15, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(15, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
18[label="primary_expression"]
17[label="FLOAT_CONSTANT"]
18 -> 17
    ... action of rule 55 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
19[label="postfix_expression"]
19 -> 18
    ... action of rule 48 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
20[label="unary_expression"]
20 -> 19
    ... action of rule 46 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
21[label="multiplicative_expression"]
21 -> 20
    ... action of rule 43 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
22[label="additive_expression"]
22 -> 21
    ... action of rule 40 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
23[label="relational_expression"]
23 -> 22
    ... action of rule 35 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
24[label="equality_expression"]
24 -> 23
    ... action of rule 32 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
25[label="logical_and_expression"]
25 -> 24
    ... action of rule 30 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
26[label="expression"]
26 -> 25
    ... action of rule 28 completed
    pop(1) from stack having size 8
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
29[label="assignment_statement"]
28[label="="]
27[label=";"]
29 -> 16
29 -> 28
29 -> 26
29 -> 27
    ... action of rule 27 completed
    pop(4) from stack having size 9
    pop(): next state: 15, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(15, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
30[label="statement"]
30 -> 29
    ... action of rule 24 completed
    pop(1) from stack having size 6
    pop(): next state: 15, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(15, 'statement'): shift 16 ('statement' processed)
    push(state 16)
    ==
    lookup(16, '_UNDETERMINED_'): default reduction by rule 19
    executeAction(): of rule 19 ...
31[label="statement_list"]
31 -> 30
    ... action of rule 19 completed
    pop(1) from stack having size 6
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 19 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
33[label="l_expression"]
32[label="IDENTIFIER"]
33 -> 32
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
35[label="primary_expression"]
34[label="FLOAT_CONSTANT"]
35 -> 34
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
36[label="postfix_expression"]
36 -> 35
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
37[label="unary_expression"]
37 -> 36
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
38[label="multiplicative_expression"]
38 -> 37
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
39[label="additive_expression"]
39 -> 38
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
40[label="relational_expression"]
40 -> 39
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
41[label="equality_expression"]
41 -> 40
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
42[label="logical_and_expression"]
42 -> 41
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
43[label="expression"]
43 -> 42
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
46[label="assignment_statement"]
45[label="="]
44[label=";"]
46 -> 33
46 -> 45
46 -> 43
46 -> 44
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
47[label="statement"]
47 -> 46
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
48[label="statement_list"]
48 -> 31
48 -> 47
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
50[label="l_expression"]
49[label="IDENTIFIER"]
50 -> 49
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
52[label="primary_expression"]
51[label="FLOAT_CONSTANT"]
52 -> 51
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
53[label="postfix_expression"]
53 -> 52
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
54[label="unary_expression"]
54 -> 53
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
55[label="multiplicative_expression"]
55 -> 54
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
56[label="additive_expression"]
56 -> 55
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
57[label="relational_expression"]
57 -> 56
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
58[label="equality_expression"]
58 -> 57
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
59[label="logical_and_expression"]
59 -> 58
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
60[label="expression"]
60 -> 59
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
63[label="assignment_statement"]
62[label="="]
61[label=";"]
63 -> 50
63 -> 62
63 -> 60
63 -> 61
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
64[label="statement"]
64 -> 63
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
65[label="statement_list"]
65 -> 48
65 -> 64
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
67[label="l_expression"]
66[label="IDENTIFIER"]
67 -> 66
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
69[label="primary_expression"]
68[label="FLOAT_CONSTANT"]
69 -> 68
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
70[label="postfix_expression"]
70 -> 69
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
71[label="unary_expression"]
71 -> 70
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
72[label="multiplicative_expression"]
72 -> 71
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
73[label="additive_expression"]
73 -> 72
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
74[label="relational_expression"]
74 -> 73
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
75[label="equality_expression"]
75 -> 74
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
76[label="logical_and_expression"]
76 -> 75
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
77[label="expression"]
77 -> 76
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
80[label="assignment_statement"]
79[label="="]
78[label=";"]
80 -> 67
80 -> 79
80 -> 77
80 -> 78
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
81[label="statement"]
81 -> 80
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
82[label="statement_list"]
82 -> 65
82 -> 81
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
84[label="l_expression"]
83[label="IDENTIFIER"]
84 -> 83
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
86[label="primary_expression"]
85[label="FLOAT_CONSTANT"]
86 -> 85
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
87[label="postfix_expression"]
87 -> 86
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
88[label="unary_expression"]
88 -> 87
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
89[label="multiplicative_expression"]
89 -> 88
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
90[label="additive_expression"]
90 -> 89
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
91[label="relational_expression"]
91 -> 90
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
92[label="equality_expression"]
92 -> 91
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
93[label="logical_and_expression"]
93 -> 92
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
94[label="expression"]
94 -> 93
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
97[label="assignment_statement"]
96[label="="]
95[label=";"]
97 -> 84
97 -> 96
97 -> 94
97 -> 95
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
98[label="statement"]
98 -> 97
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
99[label="statement_list"]
99 -> 82
99 -> 98
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
101[label="l_expression"]
100[label="IDENTIFIER"]
101 -> 100
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
103[label="primary_expression"]
102[label="FLOAT_CONSTANT"]
103 -> 102
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
104[label="postfix_expression"]
104 -> 103
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
105[label="unary_expression"]
105 -> 104
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
106[label="multiplicative_expression"]
106 -> 105
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
107[label="additive_expression"]
107 -> 106
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
108[label="relational_expression"]
108 -> 107
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
109[label="equality_expression"]
109 -> 108
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
110[label="logical_and_expression"]
110 -> 109
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
111[label="expression"]
111 -> 110
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
114[label="assignment_statement"]
113[label="="]
112[label=";"]
114 -> 101
114 -> 113
114 -> 111
114 -> 112
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
115[label="statement"]
115 -> 114
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
116[label="statement_list"]
116 -> 99
116 -> 115
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
118[label="l_expression"]
117[label="IDENTIFIER"]
118 -> 117
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'FLOAT_CONSTANT'
    lookup(63, 'FLOAT_CONSTANT'): shift 54 ('FLOAT_CONSTANT' processed)
    push(state 54)
    ==
    lookup(54, '_UNDETERMINED_'): default reduction by rule 55
    executeAction(): of rule 55 ...
120[label="primary_expression"]
119[label="FLOAT_CONSTANT"]
120 -> 119
    ... action of rule 55 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 55 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
121[label="postfix_expression"]
121 -> 120
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
122[label="unary_expression"]
122 -> 121
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
123[label="multiplicative_expression"]
123 -> 122
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
124[label="additive_expression"]
124 -> 123
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
125[label="relational_expression"]
125 -> 124
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
126[label="equality_expression"]
126 -> 125
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
127[label="logical_and_expression"]
127 -> 126
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
128[label="expression"]
128 -> 127
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
131[label="assignment_statement"]
130[label="="]
129[label=";"]
131 -> 118
131 -> 130
131 -> 128
131 -> 129
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
132[label="statement"]
132 -> 131
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
133[label="statement_list"]
133 -> 116
133 -> 132
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
135[label="l_expression"]
134[label="IDENTIFIER"]
135 -> 134
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'INT_CONSTANT'
    lookup(63, 'INT_CONSTANT'): shift 53 ('INT_CONSTANT' processed)
    push(state 53)
    ==
    lookup(53, '_UNDETERMINED_'): default reduction by rule 54
    executeAction(): of rule 54 ...
137[label="primary_expression"]
136[label="INT_CONSTANT"]
137 -> 136
    ... action of rule 54 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 54 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
138[label="postfix_expression"]
138 -> 137
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
139[label="unary_expression"]
139 -> 138
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
140[label="multiplicative_expression"]
140 -> 139
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
141[label="additive_expression"]
141 -> 140
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
142[label="relational_expression"]
142 -> 141
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
143[label="equality_expression"]
143 -> 142
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
144[label="logical_and_expression"]
144 -> 143
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
145[label="expression"]
145 -> 144
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
148[label="assignment_statement"]
147[label="="]
146[label=";"]
148 -> 135
148 -> 147
148 -> 145
148 -> 146
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
149[label="statement"]
149 -> 148
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
150[label="statement_list"]
150 -> 133
150 -> 149
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using 'IDENTIFIER'
    lookup(36, 'IDENTIFIER'): shift 29 ('IDENTIFIER' processed)
    push(state 29)
    ==
    lookup(29, '_UNDETERMINED_'): default reduction by rule 58
    executeAction(): of rule 58 ...
152[label="l_expression"]
151[label="IDENTIFIER"]
152 -> 151
    ... action of rule 58 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'l_expression'
    reduce(): by rule 58 to N-terminal 'l_expression'
    ==
    lookup(36, 'l_expression'): shift 28 ('l_expression' processed)
    push(state 28)
    ==
    nextToken(): using `=' (61)
    lookup(28, `=' (61)): shift 63 (`=' (61) processed)
    push(state 63)
    ==
    nextToken(): using 'INT_CONSTANT'
    lookup(63, 'INT_CONSTANT'): shift 53 ('INT_CONSTANT' processed)
    push(state 53)
    ==
    lookup(53, '_UNDETERMINED_'): default reduction by rule 54
    executeAction(): of rule 54 ...
154[label="primary_expression"]
153[label="INT_CONSTANT"]
154 -> 153
    ... action of rule 54 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'primary_expression'
    reduce(): by rule 54 to N-terminal 'primary_expression'
    ==
    lookup(63, 'primary_expression'): shift 48 ('primary_expression' processed)
    push(state 48)
    ==
    lookup(48, '_UNDETERMINED_'): default reduction by rule 48
    executeAction(): of rule 48 ...
155[label="postfix_expression"]
155 -> 154
    ... action of rule 48 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'postfix_expression'
    reduce(): by rule 48 to N-terminal 'postfix_expression'
    ==
    lookup(63, 'postfix_expression'): shift 46 ('postfix_expression' processed)
    push(state 46)
    ==
    lookup(46, '_UNDETERMINED_'): default reduction by rule 46
    executeAction(): of rule 46 ...
156[label="unary_expression"]
156 -> 155
    ... action of rule 46 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'unary_expression'
    reduce(): by rule 46 to N-terminal 'unary_expression'
    ==
    lookup(63, 'unary_expression'): shift 45 ('unary_expression' processed)
    push(state 45)
    ==
    lookup(45, '_UNDETERMINED_'): default reduction by rule 43
    executeAction(): of rule 43 ...
157[label="multiplicative_expression"]
157 -> 156
    ... action of rule 43 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'multiplicative_expression'
    reduce(): by rule 43 to N-terminal 'multiplicative_expression'
    ==
    lookup(63, 'multiplicative_expression'): shift 44 ('multiplicative_expression' processed)
    push(state 44)
    ==
    nextToken(): using `;' (59)
    lookup(44, `;' (59)): default reduction by rule 40
    executeAction(): of rule 40 ...
158[label="additive_expression"]
158 -> 157
    ... action of rule 40 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'additive_expression'
    reduce(): by rule 40 to N-terminal 'additive_expression'
    ==
    lookup(63, 'additive_expression'): shift 43 ('additive_expression' processed)
    push(state 43)
    ==
    lookup(43, `;' (59)): default reduction by rule 35
    executeAction(): of rule 35 ...
159[label="relational_expression"]
159 -> 158
    ... action of rule 35 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'relational_expression'
    reduce(): by rule 35 to N-terminal 'relational_expression'
    ==
    lookup(63, 'relational_expression'): shift 42 ('relational_expression' processed)
    push(state 42)
    ==
    lookup(42, `;' (59)): default reduction by rule 32
    executeAction(): of rule 32 ...
160[label="equality_expression"]
160 -> 159
    ... action of rule 32 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'equality_expression'
    reduce(): by rule 32 to N-terminal 'equality_expression'
    ==
    lookup(63, 'equality_expression'): shift 41 ('equality_expression' processed)
    push(state 41)
    ==
    lookup(41, `;' (59)): default reduction by rule 30
    executeAction(): of rule 30 ...
161[label="logical_and_expression"]
161 -> 160
    ... action of rule 30 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'logical_and_expression'
    reduce(): by rule 30 to N-terminal 'logical_and_expression'
    ==
    lookup(63, 'logical_and_expression'): shift 40 ('logical_and_expression' processed)
    push(state 40)
    ==
    lookup(40, `;' (59)): default reduction by rule 28
    executeAction(): of rule 28 ...
162[label="expression"]
162 -> 161
    ... action of rule 28 completed
    pop(1) from stack having size 9
    pop(): next state: 63, token: 'expression'
    reduce(): by rule 28 to N-terminal 'expression'
    ==
    lookup(63, 'expression'): shift 94 ('expression' processed)
    push(state 94)
    ==
    lookup(94, `;' (59)): shift 121 (`;' (59) processed)
    push(state 121)
    ==
    lookup(121, '_UNDETERMINED_'): default reduction by rule 27
    executeAction(): of rule 27 ...
165[label="assignment_statement"]
164[label="="]
163[label=";"]
165 -> 152
165 -> 164
165 -> 162
165 -> 163
    ... action of rule 27 completed
    pop(4) from stack having size 10
    pop(): next state: 36, token: 'assignment_statement'
    reduce(): by rule 27 to N-terminal 'assignment_statement'
    ==
    lookup(36, 'assignment_statement'): shift 21 ('assignment_statement' processed)
    push(state 21)
    ==
    lookup(21, '_UNDETERMINED_'): default reduction by rule 24
    executeAction(): of rule 24 ...
166[label="statement"]
166 -> 165
    ... action of rule 24 completed
    pop(1) from stack having size 7
    pop(): next state: 36, token: 'statement'
    reduce(): by rule 24 to N-terminal 'statement'
    ==
    lookup(36, 'statement'): shift 35 ('statement' processed)
    push(state 35)
    ==
    lookup(35, '_UNDETERMINED_'): default reduction by rule 20
    executeAction(): of rule 20 ...
167[label="statement_list"]
167 -> 150
167 -> 166
    ... action of rule 20 completed
    pop(2) from stack having size 7
    pop(): next state: 15, token: 'statement_list'
    reduce(): by rule 20 to N-terminal 'statement_list'
    ==
    lookup(15, 'statement_list'): shift 36 ('statement_list' processed)
    push(state 36)
    ==

    nextToken(): using `}' (125)
    lookup(36, `}' (125)): shift 68 (`}' (125) processed)
    push(state 68)
    ==
    lookup(68, '_UNDETERMINED_'): default reduction by rule 18
    executeAction(): of rule 18 ...
170[label="compound_statement"]
169[label="{"]
168[label="}"]
170 -> 169
170 -> 14
170 -> 167
170 -> 168
    ... action of rule 18 completed
    pop(4) from stack having size 7
    pop(): next state: 8, token: 'compound_statement'
    reduce(): by rule 18 to N-terminal 'compound_statement'
    ==
    lookup(8, 'compound_statement'): shift 10 ('compound_statement' processed)
    push(state 10)
    ==
    lookup(10, '_UNDETERMINED_'): default reduction by rule 3
    executeAction(): of rule 3 ...
171[label="function_definition"]
171 -> 2
171 -> 6
171 -> 170
    ... action of rule 3 completed
    pop(3) from stack having size 4
    pop(): next state: 0, token: 'function_definition'
    reduce(): by rule 3 to N-terminal 'function_definition'
    ==
    lookup(0, 'function_definition'): shift 2 ('function_definition' processed)
    push(state 2)
    ==
    lookup(2, '_UNDETERMINED_'): default reduction by rule 1
    executeAction(): of rule 1 ...
172[label="translation_unit"]
172 -> 171
    ... action of rule 1 completed
    pop(1) from stack having size 2
    pop(): next state: 0, token: 'translation_unit'
    reduce(): by rule 1 to N-terminal 'translation_unit'
    ==
    lookup(0, 'translation_unit'): shift 1 ('translation_unit' processed)
    push(state 1)
    ==


    nextToken(): using '_EOF_'
    lookup(1, '_EOF_'): ACCEPT
    ACCEPT(): Parsing successful
    parse(): returns 0}
